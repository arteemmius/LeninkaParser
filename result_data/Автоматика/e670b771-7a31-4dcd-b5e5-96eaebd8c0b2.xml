<doc>
  <source auto="true" type="str" verify="true"><![CDATA[https://cyberleninka.ru/article/n/kontseptsiya-raspredelennoy-vychislitelnoy-sistemy-s-detsentralizovannym-upravleniem]]></source>
  <category auto="true" type="str" verify="true"><![CDATA[Автоматика]]></category>
  <author auto="true" type="list" verify="true">
    <item type="str"><![CDATA[Калайда Владимир Тимофеевич]]></item>
    <item type="str"><![CDATA[Петров Алексей Анатольевич]]></item>
  </author>
  <title auto="true" type="str" verify="true"><![CDATA[Концепция распределенной вычислительной системы с децентрализованным управлением]]></title>
  <keywords auto="true" type="list" verify="true">
    <item type="str"><![CDATA[распределенная система]]></item>
    <item type="str"><![CDATA[система управления]]></item>
    <item type="str"><![CDATA[программный комплекс]]></item>
  </keywords>
  <annotation auto="true" type="str" verify="true"><![CDATA[Предлагается архитектура построения распределенных вычислительных систем в локальных сетях с распределенной системой управления.]]></annotation>
  <text auto="true" type="str" verify="true"><![CDATA[Предлагается архитектура построения распределенных вычислительных систем в локальных сетях с распределенной системой управления. Ключевые слова: распределенная система, система управления, программный комплекс. Интеграция информационных и вычислительных ресурсов в единую среду и организация эффективного доступа к ним является одним из основных направлений развития современных информационных технологий. В настоящее время компьютеры, объединенные локальной кооперативной и глобальной сетью, в основном используются как источники информации. Поэтому на первый план выходит проблема эффективного использования вычислительных ресурсов каждой станции сети для решения крупных научных, производственных и технологических задач. Такая постановка вопроса требует создания иной технологии интеграции процессоров, чем технология Шете^ Эти технологии в настоящее время развиваются в виде ОЫБ-технологии и технологии «Облако» [1]. Однако подход в предлагаемых системах ориентирован в основном на глобальные вычислительные сети, в то время как ниша корпоративных и кампусных локальных вычислительных сетей, очевидно, требует несколько иного подхода решения задачи интеграции вычислительных ресурсов. Анализ задач, решаемых в корпоративных и производственных сетях, показывает, что эта интеграция должна удовлетворять следующему набору требований: 1. Не требовать использования дополнительного дорогостоящего коммутационного оборудования. 2. Быть достаточно простой в настройке и эксплуатации; не требовать для постоянного обслуживания высококлассных специалистов. 3. Быть «прозрачной» для конечного пользователя, т.е. должна скрывать от него все тонкости ее функционирования. 4. Быть «самонастраиваемой», т.е. уметь поддерживать себя в активном состоянии в любых ситуациях (за исключением форс-мажорных) без вмешательства человека. 5. Поддерживать выполнение задач широкого класса. 6. Быть надежно защищенной от вторжения извне. 7. Предоставлять гибкую систему настройки полномочий каждого из участников вычислительной среды. Естественно, что эти требования зачастую противоречивы, но именно максимальное удовлетво -рение им позволит для решения производственных, технологических и офисных задач организации предприятий максимально использовать ресурсы имеющихся компьютеров. В настоящей работе предлагается одна из возможных реализаций такой интеграции для небольших и средних локальных вычислительных сетей. Методы интеграции систем В настоящее время традиционно сложилось несколько механизмов и архитектур организации общей информационно-вычислительной среды. Наибольшее распространение получила организация клиент-сервер, в которой задания или сетевая нагрузка распределены между поставщиками услуг (сервисов), называемыми серверами, и заказчиками услуг, называемыми клиентами. Такая архитектура позволяет распределить функции вычислительной системы между несколькими независимыми компьютерами в сети, хранить все данные на сервере, защищенные от несанкционированного доступа, объединять различных клиентов для решения одной задачи. Однако существенным недостатком такой архитектуры является асимметрия системы, в результате которой нагрузка на сервер всегда выше, чем на остальные процессоры сети. Кроме того, эксплуатация системы требует наличия высококвалифицированных специалистов - системных администраторов, обеспечивающих эффективную работоспособность [2]. Более развитой является технология СОИБА, основанная на архитектуре брокера объектных запросов. Здесь предусмотрены равноправие всех объектов сети и довольно простые интерфейсы обмена между процессами. Однако в настоящее время эта архитектура существует лишь в спецификациях либо в виде реализации отдельных закрытых подсистем, и пока широкого распространения не получила. Вместе с тем стоит отметить основные ее достоинства: платформенная независимость, языковая независимость, динамические вызовы, динамическое обнаружение объектов, масштабируемость, CORBA-сервисы, широкая индустриальная поддержка [3, 4]. Промежуточное положение между этими технологиями занимает технологический стандарт COM/DCOM, предназначенный для создания программного обеспечения на основе взаимодействующих распределённых компонентов, каждый из которых может использоваться во многих программах одновременно. Технология COM/DCOM основана на интеграции API приложений Windows, что одновременно является ее достоинством и недостатком, так как вне ОС Windows трудно реализуема. Другим недостатком является наличие межсетевых экранов, которые достаточно сложны в настройке [5]. Вместе с тем, на основе COM/DCOM-технологии разработан ряд эффективных программных продуктов, среди которых следует отметить DirectShow [6]. Подобная технология была принята в разработке «Базис-1», «Базис-2», «Базис-3» - систем проектирования, реализации и администрирования распределенных вычислительных систем для различных приложений. В среде «Базис» были реализованы ряд практических задач, в частности: система безопасности «Лик» и система автоматизированного управления экспериментальными исследованиями на бигармоническом лазерном спектрометре [7, 8]. Однако практика использования системы «Базис» для динамически изменяющихся задач показала, что основным недостатком является использование конфигуратора, который настраивается вручную при запуске задачи, и может также вручную меняться в процессе ее решения. Ручная настройка изменения явно вступает в противоречие с требованием оперативности решения тех или иных прикладных задач. В настоящей работе предлагается вариант построения распределенных вычислительных систем для локальных и корпоративных сетей, в котором устранен данный недостаток. Предлагаемое решение На каждом компьютере вычислительной системы имеется набор модулей, реализующих определенные алгоритмы программного комплекса, например: модуль вычисления обратной матрицы, модуль нахождения градиента изображения. Набор модулей на каждом из узлов сети может отличаться. Каждый из этих модулей может использовать другие для решения подзадач. Например, модуль нахождения обратной матрицы использует модуль решения системы линейных алгебраических уравнений. Система управления распределенными вычислениями включает набор диспетчеров на каждом компьютере сети, выполняющий планирование вычислительного процесса, осуществляющий сборку информации о параметрах и состояния компьютера, ведущий сбор статистической информации и реагирующий на сообщения от диспетчеров других компьютеров сети. Процесс функционирования системы можно разбить на два этапа. Первый этап представляет собой установку и настройку системы. На этом этапе происходит автоматический сбор параметров сети, которые будут использоваться в дальнейшем при планировании вычислительных процессов. Также на основе полученных данных о параметрах вычислительной сети происходит распределение алгоритмических модулей по узлам сети. Это распределение зависит от наличия свободного дискового пространства, вычислительных возможностей узлов, пропускной способности сети. Второй этап - использование системы для решения непосредственных вычислительных задач. При запуске вычислительной задачи диспетчер компьютера, на котором эта задача была запущена, планирует процесс выполнения этой задачи таким образом, чтобы процесс максимально соответствовал выбранному критерию оптимальности. Примерами таких критериев могут быть минимальное время выполнения задачи, поддержка равномерной загрузки всех узлов сети и т. д. Планирование происходит на основе параметров сети, статистической информации, текущей загрузки каждого компьютера и каналов передачи данных. Диспетчер компьютера, на котором была запущена задача, следит за выполнением задачи: собирает статистическую информацию о времени выполнения той или иной подзадачи на конкретном компьютере, принимает решение об изменении плана в критических ситуациях, когда выполнение текущего плана невозможно или нецелесообразно в связи с возникшими непредвиденными обстоятельствами. Такими обстоятельствами могут быть отказ канала передачи данных, резкое повышение загруженности одного узла из-за какой-то другой задачи и т.д. По запросу пользователя выдаются рекомендации об изменении пропускной способности вычислительной сети. Примером рекомендации может служить совет улучшения канала связи в ситуации, когда компьютер с высокой вычислительной способностью находится за узким каналом пере- дачи данных, что делает невозможным его полноценное использование. Такие рекомендации вычисляются на основе статистических данных, собранных в процессе функционирования системы. Периодически на основе статистических данных или в случае изменения параметров сети система производит перераспределение алгоритмических модулей. Например, в процессе функционирования системы может обнаружиться, что если бы на определенном узле был определенный алгоритмический модуль, то множество вычислительных задач удалось бы завершить быстрее. Выводы Предлагаемое решение максимально удовлетворяет требованиям, выделенным в начале статьи. Система не требует наличия специального оборудования, так как устанавливается уже на имеющиеся в распоряжении сети узлы. Круг задач, который может решать система, ограничен лишь набором модулей системы. Поэтому система в состоянии решить любую задачу при наличии соответствующих модулей. Также она является самонастраиваемой, поэтому не требует вмешательства особого специалиста при ее использовании и настройке. Запустив такую систему однажды, пользователь может быть уверен, что вычислительные задачи будут выполняться все быстрее и быстрее, особенно если следовать рекомендациям системы по улучшению вычислительной сети. Работа выполнена в рамках НИР, выполняемой по ФПЦ «Научные и научно-педагогические кадры инновационной России» на 2009-2013 гг. (госконтракт № 14.740.11.039В). ]]></text>
</doc>
