<doc>
  <source auto="true" type="str" verify="true"><![CDATA[https://cyberleninka.ru/article/n/programmnaya-realizatsiya-algoritma-resheniya-zadachi-razmescheniya-s-uchyotom-vremennyh-zaderzhek]]></source>
  <category auto="true" type="str" verify="true"><![CDATA[Автоматика]]></category>
  <author auto="true" type="list" verify="true">
    <item type="str"><![CDATA[Лежебоков А.А.]]></item>
  </author>
  <title auto="true" type="str" verify="true"><![CDATA[Программная реализация алгоритма решения задачи размещения с учётом временных задержек]]></title>
  <keywords auto="true" type="list" verify="true"/>
  <annotation auto="true" type="str" verify="true"><![CDATA[]]></annotation>
  <text auto="true" type="str" verify="true"><![CDATA[Введение. Процесс проектирования ЭВА является сложным и многоэтапным. Одной из задач проектирования является размещение модулей ЭВА в монтажном * Работа выполнена при поддержке РФФИ (гранты № 05-08-18115, № 07-01-00511) и программ развития научного потенциала высшей школы 2006-2008 гг. (РНП.2.1.2.3193, РНП 2.1.2.2238). пространстве. Высокая плотность размещения элементов ЭВА создает большие трудности при реализации соединений между ними. В этой связи задача размещения элементов на плоскости определяет быстроту и качество трассировки. В общем виде задача размещения формулируется следующим образом: в монтажном пространстве задана область, которая разбивается на множество позиций (посадочных мест) P = {p1, p2, ..., pq}, число которых должно быть не меньше числа размещаемых элементов. Каждый элемент может занимать не более одного посадочного места, расстояние между которыми описывается симметричной матрицей расстояний D = ||dij||. Имеется множество элементов, связанных между собой множеством электрических цепей, которые необходимо разместить на мно-P , - щения, при соблюдении наложенных ограничений. Исходными данными при решении задачи размещения является прямоуголь-( ), , ( ), -ний или его матричный (списковый) эквивалент. На прямоугольную конструкцию накладывается Декартова система координат с осями s и t, определяющая граф Gr, представляющий собой координатную решетку. Расстояние di,j между узлами i и j этого графа описывается выражением di,j = |si - sj| + |ti - tj|, при условии, что дорожки ведутся только под прямым углом, т.е. имеют строго вертикальное или строго горизонтальное положение. Основными известными критериями при размещении [1] являются: минимальная суммарная длина связей, минимальная длина самой длинной связи, минимум числа возможных пересечений, минимум числа изгибов соединений, минимальная площадь кристалла. В настоящее время всё более актуальным становится ещё один критерий решения задачи размещения - суммарная величина временных задержек схемы [2]. В [2] описывается модель временных задержек, которую и предлагается использовать для разработки программного обеспечения решения . Выбор языка и среды программирования. Язык C++ - это универсальный язык программирования, для которого характерны экономичность выражения, современный поток управления и структуры данных, богатый набор операторов. , ++ -. , , . Такой метод построения программ часто называют абстракцией данных. Информация о типах содержится в некоторых объектах типов, определенных пользователем. Такие объекты просты и надежны в использовании в тех ситуациях, когда их тип нельзя установить на стадии компиляции. Программирование с применением таких объектов часто называют объектно-ориентированным. Этот метод дает более , . В качестве среды программирования был выбран Borland C++ Builder 6.0 фирмы Inprise, так как он является мощной системой разработки, имеет множество , C++, программирования с помощью визуального подхода, позволяет создавать 32битные приложения для работы в современных многозадачных операционных системах Windows 9x и Windows XP. . -дачи размещения ставились следующие требования, которым должно удовлетво- ( ): ♦ ПО должно обладать интуитивно понятным интерфейсом, для обеспечения эффективной работы инженера-схемотехника. ♦ Ввод схемы должен осуществляться следующими способами: ■ ручной ввод; ■ загрузка из файла; ■ случайно синтезированная схема. ♦ Должен быть реализован блок сбора и вывода статистики работы алгоритма для осуществления экспериментальных исследований. Алгоритм решения задачи размещения описан в [3]. Это модифицированный генетический алгоритм (ГА) [4], учитывающий реальные топологические параметры схемы и реализующий модель временных задержек [2] для подсчёта целевой . Разработанная программная система позволяет работать с различными типами элементов. База данных элементов описывается и хранится отдельно, что делает разработанное ПО довольно гибким и универсальным инструментом решения . Окно настроек генетического алгоритма и модели временных задержек представлено на рис.1. Настраиваемыми опциями алгоритма являются: ♦ выбор стратегии создания начальной популяции; ♦ операто р селекции; ♦ оператор кроссинго вера и его вероятность; ♦ операторы мутации и и нверсии и их вероятность; ♦ размер популяции и число итераций (количество поколений). К настройкам модели относятся: ♦ ; ♦ ёмкость загрузки контакта и ё мкость модуля на единицу длины; Настройки генетического алгоритма О пастроики генетического алгоритма Стратегия | стратегия дробовика - Селекция Н имбридинг 1- Кроссинговер | на основе золотого сечения - Мутация и инверсия | одноточечная инверсия - Вероятность оператора кроссинговера [%} [8ЁП Вероятность оператора мутации [X] Вероятность инверсии [%) 155 тэ Численность популяции [зЕГ и Число итераций [жГ "3 Параметры модели временных задержек Ведущее сопротивление Ид |2,05 Ёмкость загрузки контакта Сд |1.53 Сопротивление медля на ед. длины 10.80 Ёмкость модуля на ед. длины |0,65 ОК Рис.1. Настройки алгоритма и модели ершенных задержек На рис.2 представлено главное окно программы, которое содержит изобра- ( ), . [■ Размещение элементов ЕНЕІ | Файл Схема Алгоритм Информация 1 Рис.2. Исходное размещение элементов После запуска и выполнения алгоритма элементы меняют своё расположение, согласно лучшей хромосоме в популяции. Пример решения задачи представлен на .3. - ется возможность провести исследования алгоритма. Рис. 3. Пример решения задачи размещения , : редактирования матрицы связности элементов; изменения типов элементов; изменения размеров ДРП; просмотра локальных степеней каждого элемента, для определения максимально и минимально связного элементов. . исследований является определение временной сложности алгоритма (В С А) и сравнение эффективности алгоритма с классическими методами решения задачи. Временная сложность алгоритма - это зависимость времени работы алгоритма от некоторого управляющего параметра. В данной работе управляющим параметром является размер хромосомы - количество элементов схемы. Для определения ВС А алгоритма был проведён ряд экспериментов, в которых изменялось число элементов схемы, остальные параметры алгоритма оставались . Таблица Таблица результатов измерений времени работы алгоритмов для разного количества элементов Элементы 100 200 300 400 500 Эксп. №1 0,875 0,275 1,89 0,568 3,594 1,002 6,422 1,658 10,344 2,156 Эксп. №2 0,96 0,274 1,859 0,552 3,594 1,11 6,313 1,557 10,203 2,024 Эксп. №3 1,2 0,27 1,891 0,458 3,578 1,125 6,406 1,678 10,407 2,258 Эксп. №4 0,78 0,265 1,859 0,585 3,563 0,988 6,36 1,459 10,25 2,894 Генетический, Среднее значение (сек.) 0,95 1,87 3,58 6,38 10,30 , Среднее значение (сек.) 0,27 0,54 1,06 1,59 2,33 На рис.4 представлены графики зависимости времени работы от количества элментов схемы для классического последовательного и разработанного генетиче-. Рис.4. Графики ВСА Как видно из таблицы и графика, временная сложность генетического алгоритма близка к квадратичной и может быть выражена формулой 0(ап2). Для срав- нения на этом же графике представлена временная сложность последовательного алгоритма, которая имеет линейный характер. Заключение. Разработанное ПО позволяет эф фективно решать задачу размещения элементов СБИС с помощью модифицированного генетического алгоритма. Отдельно хранящееся описание элементов и обширные настройки алгоритма и модели сделали программу достаточно универсальной. Проведённые экспериментальные исследования позволили определить временную сложность алгоритма ]]></text>
</doc>
