<doc>
  <source auto="true" type="str" verify="true"><![CDATA[https://cyberleninka.ru/article/n/algoritm-komponovki-uchityvayuschiy-vremennye-parametry-na-osnove-razbieniya-konusov-shemy]]></source>
  <category auto="true" type="str" verify="true"><![CDATA[Автоматика]]></category>
  <author auto="true" type="list" verify="true">
    <item type="str"><![CDATA[Рыбальченко М.В.]]></item>
  </author>
  <title auto="true" type="str" verify="true"><![CDATA[Алгоритм компоновки, учитывающий временные параметры на основе разбиения "конусов" схемы]]></title>
  <keywords auto="true" type="list" verify="true"/>
  <annotation auto="true" type="str" verify="true"><![CDATA[]]></annotation>
  <text auto="true" type="str" verify="true"><![CDATA[Основная особенность алгоритмов, использующих конусные структуры - это возможность помещать критические по времени задержки пути внутрь компонент разбиения с одновременным уменьшением числа компонент. "Конус" схемы -множество всех комбинационных элементов схемы, которые могут быть найдены [1]. критический путь как наиболее длинный путь между некоторым входом и выходом в конусе исходной неразбитой схемы [2]. Если такой критический путь разрезан в процессе разбиения схемы на компоненты, то возникающие в результате этого паразитные емкости могут привести к чрезмерно большим временным задержкам и, , -. Наиболее часто данная проблема возникает при проектировании вентильных матриц, имеющих высокую насыщенность связями, поскольку большое число входов/выходов обуславливает необходимость учёта при компоновке помимо ограничений на размер компонент, также и ограничений на количество их выводов (фактически он становится основным). При этом увеличивается общее количество ком- * Работа выполнена при поддержке программы развития научного потенциала высшей школы РНП.2.1.2.3193 Известия ТРТУ_____________________________________________Тематический выпуск понент разбиения, что приводит к разрезанию большого числа сигнальных цепей, среди которых имеются и критические пути. Необходимо таким образом сформировать компоненты разбиения, чтобы длительность задержки наиболее критического по времени пути была бы близкой к длительности задержки соответствующего пути в коммутационной схеме до ее разбиения. Поставим задачу таким образом сформировать компоненты разбиения, чтобы для каждой компоненты: t max ____ t ^ critical critical (i) Size Costp =---------- _ max, (2) p IOp SizeP < MaxSize , (3) IOP < MaxIO , (4) где tcriticai - задержка критического пути в исходной коммутационной схеме; max tcriticai - задержка этого пути после разбиения схемы; Costp - конструктивный критерий разбиения, соответствующий удельному числу внешних связей компоненты; Sizep - размер (число элементов) компоненты разбиения; MaxSize - максимально допустимый размер компоненты разбиения; IOP - ; Max IO - максимально допустимое число внешних связей компоненты раз. Непосредственный учет критических по времени задержки путей может быть выполнен при использовании ориентированного графа в качестве модели комму. -ния конусных структур рассмотрена в [3]. Рассматриваемый алгоритм кластеризует узлы, принадлежащие накладывающимся областям конусов схемы. Эти кластеры могут содержать только один узел с высоким разветвлением на выходе, и при объединении таких кластеров возможно достижение высоких значений коэффициента Cost. Алгоритм включает сле-. i. . список CRoot всех первичных выходов, причём размер этого списка соответствует числу конусов в схеме. 2. : , -рекрывающихся между собой, а также из областей, полученных путём вырезания этих областей из конусов: ♦ просматриваются все узлы схемы из каждого узла в списке CRoot к пер, , CRoot. имеет список меток LL: #P (Nd) LL (Nd)= U LL (P (Nd)), (5) i=i где #P(Nd) - число родителей P(Nd) вершины Р из узла Nd. Если в нем не существует родитель с таким списком меток, то узел Nd добавляется к списку CRoot, так как это - корень кластера. Эти новые CRoot входы имеют размеры списков меток больше, чем 1. Новый размер списка CRoot соответствует числу кластеров в схеме; ♦ соединение в кластеры перекрывающихся конусов происходит группированием узлов с одинаковыми списками меток. Каждый кластер содержит уникальные узлы, определяемые как: jNd | (( (Nd), [LL (Nd) = LL (p(Nd), )]) 1 Cluster. = CRoot, u i , , s , s , u ^, (6) г ‘ [a(LL (Nd ) = LL (CRooti ) = LL (CRooti )) где CRoot — объединенный корень кластера Clusteri и P(Nd)i=CRoot, при условии Vi ïj (LL(CRoot) nLL(CRoot) =0) Схемы, имеющие намного больше кластеров, чем конусов, указывают на сильное перекрытие конусов и высокое разветвление на выходе узлов. 3. Объединение кластеров в компоненты с максимизацией стоимости (2) компонент и с учётом ограничений (3) и (4) для минимизации числа компонент раз. 4. , компоненту разбиения без нарушения установленных ограничений, осуществляется переход к формированию следующей компоненты в соответствии с п. 3. Если больше никакие кластеры не могут быть объединены, алгоритм заканчивает рабо, . Применимость данного алгоритма обусловлена величиной разветвления на выходах элементов схемы. При малых значениях разветвления, ограничение на число внешних выводов компонент не нарушается при помещении в них целых конусов, и может быть использован ранее рассмотренный алгоритм [3]. В противном случае указанные ограничения сразу же могут быть нарушены, что потребует применения рассмотренного выше подхода к разрезанию конусов. В дальнейшем предполагается модифицировать алгоритм для отслеживания образования вторичных критических путей и их минимизации. ]]></text>
</doc>
