<doc>
  <source auto="true" type="str" verify="true"><![CDATA[https://cyberleninka.ru/article/n/optimizatsiya-zaprosov-k-bazam-dannyh-informatsionnyh-sistem]]></source>
  <category auto="true" type="str" verify="true"><![CDATA[Автоматика]]></category>
  <author auto="true" type="list" verify="true">
    <item type="str"><![CDATA[Кузнецов Л.А.]]></item>
    <item type="str"><![CDATA[Погодаев А.К.]]></item>
    <item type="str"><![CDATA[Овчинников В.В.]]></item>
  </author>
  <title auto="true" type="str" verify="true"><![CDATA[Оптимизация запросов к базам данных информационных систем]]></title>
  <keywords auto="true" type="list" verify="true"/>
  <annotation auto="true" type="str" verify="true"><![CDATA[]]></annotation>
  <text auto="true" type="str" verify="true"><![CDATA[Кузнецов Л.А., Погодаев А.К., Овчинников В.В. (Липецкий государственный технический университет) pak@stu.lipetsk.ru Введение Информационные системы нашли широкое применение в системах, решающих производственные, экономические, технологические и другие задачи самого разного профиля. Эффективность таких систем зависит от нескольких факторов: технического обеспечения, структуры хранения данных, структуры запросов. Данная работа посвящена проблеме повышения эффективности запросов в СУБД, поддерживающих реляционную модель данных. В работах отечественных исследователей уделяется внимание широкому кругу вопросов: статистическим, объектно-ориентированным, временным базам данных, базам данных реального времени [1, 2]. Все они, как правило, рассматривают проблемы, связанные с организацией хранения данных, а формализация и оптимизация запросов рассматривается лишь в контексте дедуктивных баз данных [3]. В зарубежных работах в основном акцентируется внимание на методы обработки неструктурированных данных и широковещательные базы данных [5]. В [4] даны основы метода решения задачи оптимизации запросов, различная модификация которого используется с успехом во многих дорогих современных реляционных СУБД со встроенными оптимизаторами. Однако на практике часто приходится использовать относительно недорогие системы, не имеющие оптимизаторов, где пользователи нередко применяют семантически прозрачные запросы, но не оптимальные с точки зрения их эффективности. Более того, как показывает опыт, и в системах со встроенными оптимизаторами небесполезна предварительная внешняя оптимизация. Возникает потребность в разработке программной надстройки для формирования оптимальных запросов. Поэтому в данной 1 Работа финансируется Министерством образования РФ в форме гранта Г00-4.1-68 статье предлагается формальный подход, который будет полезен для реализации такой надстройки. 1. Модель реляционного выражения Реляционное выражение состоит из элементов, каждый из которых связан с одним или более другими элементами выражения. Известно, что элементами выражения являются элементы множеств отношений, логических выражений, атрибутов, реляционных операций. Введем обозначения: B - множество элементов реляционного выражения. K С B - множество отношений, участвующих в выражении. $ С B - множество логических выражений, участвующих в реляционном выражении. Р С В - множество атрибутов, участвующих в реляционном выражении. О С В - множество реляционных операций, участвующих в выражении. Хс О, Пс О, П С О, и С О, Я С О - множества реляционных операций каждого типа: селекция, проекция, декартово произведение, объединение, разность. Н = К • О - множество аргументов реляционных операций. О С В2 - множество связей выражения. Если операция не коммутативна (разность), порядок аргументов будем задавать однонаправленной связью между аргументами: (с, а) е О, (с, Ь) е О,(а, Ь) е О, а е В, Ь е В, с е О, что интерпретируется так: "реляционная операция с имеет минимум два упорядоченных аргумента а и Ь . Если операция коммутативна, то никаких однонаправленных связей между аргументами быть не должно: (с, а) е О, (с, Ь) е О,(а, Ь) £ О, а е В, Ь е В, с е О. J С $ X Р - множество связей между логическими выражениями и атрибутами; это соответствие является постоянным в ходе любых преобразований реляционного выражения, а поэтому может считаться внешним по отношению к реляционному выражению. Т С К X Р - множество связей между отношениями и атрибутами. Это соответствие также остается постоянным в ходе любых преобразований реляционного выражения. Множество атрибутов, с которыми связано отношение, называется типом отношения. Типом аргумента называется либо тип исходного отношения, если аргумент является отношением, либо тип отношения, которое будет получено путем применения некоторых операций над исходными отношениями, вплоть до операции, являющейся аргументом, тип которого ищется. О = (G, B, J, T) - реляционное выражение из множества всех реляционных выражений (01 О е 0). Создадим несколько вспомогательных операций над реляционным выражением. Определим операцию получения множества всех атрибутов проекции p е П в реляционном выражении q , используя аппарат исчисления предикатов: рО (p) = {х | (p, х) е G л x е P}. Определим операцию получения множества всех атрибутов, связанных с логическими выражениями селекции s е S в реляционном выражении О: Pg(s) = {х | $y[(s, у) е G л у е S л (у, х) е J]}. Определим операцию получения аргумента для произвольной реляционной операции а е O реляционного выражения О, а также обратную ей операцию: arg О а = (х | (а, х) е G л х е H), arg - а = (х | (х, а) е G л х е H). Исходя из свойств реляционного выражения, результатом обеих операций будет либо единственный элемент х е H , либо пустое множество 0 , что означает непопадание а в область определения операции. Определим операцию получения типа аргумента ае H в реляционном выражении : (ає K ® (а, х) є T) л T (а)=• $b (a,b^GA^HA(a^n®x=Tq (b) • р(а))л (а є D ®3с[(а, с) є Gлc є И лс Ф b л х=Tq (с) • Tq (b)]) Не всякое множество связей в соответствует корректному реляционному выражению. Поэтому необходимо задать совокупность предикатов, справедливость которых относительно конкретного реляционного выражения будет говорить о его корректности. Для каждого подмножества элементов реляционного выражения в є 0 можно сформулировать следующие утверждения: 1. Для селекций X : Vа(ає X ® [$Ь((а, Ь) є О а Ь є Н а "с[(а, с) є О ® (с = Ь V с є £)])]) Для любой селекции существует аргумент из множества отношений либо из множества операций, и все остальные аргументы принадлежат множеству логических выражений. 2. Для проекций П : "а(а еП ®[$Ь((а, Ь) е О а Ь е Н а "с[(а, с) е О ® (с=Ь V с е Р)])]) 3. Для декартовых произведений Б: / / "а а е D ® ЗЪЗс V - V "а (а,Ь) е G л Ъ е H л (а, с) е G л с е H л Ъ Ф с 4. Для объединений U : (а,Ъ) е G л Ъ е H л (а, с) еG л с е H л Ъ Ф с 5. Для разностей R : (а,Ъ)е G л ЪеH л (a,c)еG лcеH л лЕУ (а, d) е G л d Ф Ъ л d Ф с / / "а а еи ® ЗЪЗс V - V лЗ^ (а, d) е G л d Ф Ъ л d Ф с ЗЪЗс Ъ Ф с л [(Ъ, с) е G © (с, Ъ) е G] \ \ лЗ^ (ct,d) еG л d Ф Ъ л d Ф с / ) 6. Если G - транзитивное замыкание для G , то справедливо следующее утверждение: За"Ъ [а Ф Ъ ® (а, Ъ) е G]. 7. Любая операция может быть аргументом только одной другой операции "а"Ъ[а е O л Ъ е O л (а, Ъ) е G ® Зс[с е O л (с, Ъ) е G]] 8. Множество атрибутов проекции должно быть подмножеством типа ее аргумента: "а[а еП® Р'О (а) i T О (arg О а)]. 9. Множество атрибутов, с которыми связаны логические операции селекции, должно быть подмножеством типа ее аргумента: "а[а е S ® Pg(ü) i T О (arg О а)] 10. Типы аргументов объединения (разности) должны совпадать: "а[а е U v а е R ® arg О а = (Ъ, с) л ТО (Ъ) = ТО (с)] Если для выполняются все перечисленные утверждения, то является реляционным выражением с корректной структурой. 2. Формализация операций эквивалентного преобразования реляционного выражения Исходя из законов эквивалентности реляционных выражений, может быть преобразовано в 0' без изменения соответствия между входом и выходом реляционного выражения. Введем формализованные операции эквивалентного преобразования реляционных выражений в рамках созданной модели. Для упрощения далее приводятся только описания типов этих операций, без раскрытия их содержания и области определения, а также без описания вспомогательных операций. 1. Закон коммутативности декартового произведения заложен непосредственно в саму модель реляционного выражения. 2. Операция преобразования реляционного выражения по закону ассоциативности декартового произведения: С1 : 0Х Н X Н ® 0 . 3. Преобразование выражения по закону каскада проекций С2 : 0хПхП ® 0. 4. Преобразование выражения по закону каскада селекций С3 :0хХхХ®0. 5. Операцию, обратную С3, обозначим С31. Она имеет тип С3-1 : 0хХ®0 . 6. Перестановка селекции с проекцией имеет тип С4: 0хХхПхП®0. 7. Перестановка проекции с селекцией: С41 : 0хП хХхП ® 0 8. Удаление селекции 5 е X из реляционного выражения 0 , если она не связана ни с одним логическим выражением: С5 : 0 хХ® 0. 9. Перестановка селекции с декартовым произведением: С6:0хХхБхХхХ®0. 10. Перестановка селекции с объединением: С7:0хХхихХхХ®0. 11. Перестановка селекции с разностью: С8 : 0 хХхЯхХхХ ® 0. 12. Перестановка проекции с декартовым произведением С9 : 0хПхБхПхП ® 0 13. Перестановка проекции с объединением типа С10: 0хПхихП®0. 3. Формализация алгоритма оптимизации реляционного выражения Приведем известный алгоритм преобразования реляционного выражения [4]. Каждый этап алгоритма основан на последовательном применении законов эквивалентности к реляционному выражению. Хотя законы эквивалентности формальны, порядок их применения задан вербально, а само применение требует участия человека. Формализация алгоритма оптимизации позволит значительно упростить его реализацию на ЭВМ. Вербально алгоритм выглядит так: 1. Представляем каждую селекцию в виде каскада селекций. 2. Перемещаем каждую селекцию в сторону большей вложенности. 3. Перемещаем каждую проекцию в сторону большей вложенности, насколько это возможно. При этом проекции могут исчезать и расщепляться. 4. Комбинируем каждый каскад селекций и проекций в одиночную селекцию, одиночную проекцию или селекцию с последующей проекцией. Формализуем этот алгоритм. На основе уже созданных операций над реляционным выражением построим совокупность операций одного типа: 0 X О ® 0. Каждая такая операция применяется к некоему элементу о е О из реляционного выражения 0 е 0, и выполняет то же преобразование реляционного выражения, которое она выполняла ранее. В алгоритме используется следующее множество операций типа 0х о ®0: {с 2, С3, С3-1, С4, с;1, Сб, С7, С8, С9, Сю}. Зададим с их помощью укрупненные операции, которые будут представлять собой одну итерацию второго, третьего и четвертого этапов в вербальном описании алгоритма. Одна итерация первого этапа есть не что иное, как операция С31. Определим операцию перемещения селекции о в сторону большей вложенности в реляционном выражении : С4(0,о),аг§о ое П; Сб(0,о),аг§о о е Б; С7О, о),аг§ о о еи; АО,о),аг§о ое Я. Сп(0, о) = Ее область определения: f (Cjj, О, о) = о ёЕа arg 0 о еП • D • U • R . Определим операцию перемещения проекции о в сторону большей вложенности в реляционном выражении О : С4-1(0,o),argО о е S; С12(О, о) = - С9(0, о), arg о о е D; С10(О, o),argо о е U. Область определения: f (C12, О, о) = о еПА arg О о е! • D • U . Определим операцию агрегирования проекции или селекции Л [С2(О,o),arg О о е П; о в реляционном выражении О: С13( О,о) = i 2 О . [Сэ(q, o),argq о е!. Область определения: f (С13, О, о) = (о е Па arg О о еП)у(о е!А arg О о е S) Каждый этап алгоритма представляет собой многократное повторение операций из следующего множества: V = {С3С11з С12, С13}. Зададим общий предикат области определения для всех операций из V . Он имеет тип VХ0ХO ® B и записывается в функциональной нотации как f (v, О, о). Этот предикат истинен, если операция v е V применима к реляционной операции о в выражении . В алгоритме многократно применяется одна операция к реляционному выражению до тех пор, пока оно находится в области определения этой операции. Причем для алгоритма не существенно, в каком порядке применять ту или иную операцию. Определим операцию min v О выбора такой операции о из выражения , для которой применима операция v е V : minv О = {x | x е O а f (v, О, x) а "о[о е O а f (v, О, о) ® x < о]} Определим операцию Ж многократного применения к реляционному выражению другой операции v , пока в выражении остается хотя бы один элемент, к которому можно применить операцию v : ^0=j0, $o(f (v, О, о)); v [Жvv(0,minv 0). Рассматриваемый алгоритм представляет собой последовательность этапов. К реляционному выражению применяется некоторая операция до тех пор, пока это выражение не выйдет за пределы области определения операции, то есть 3(в) = ЖС зЖC jЖCji ЖC-1 в . Таким образом, получено формализованное представление алгоритма оптимизации реляционного выражения, который может быть реализован в виде программного обеспечения для генерации оптимальных запросов в рамках информационных систем, функционирующих на предприятиях. ]]></text>
</doc>
