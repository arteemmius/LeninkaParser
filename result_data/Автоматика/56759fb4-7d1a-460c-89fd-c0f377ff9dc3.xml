<doc>
  <source auto="true" type="str" verify="true"><![CDATA[https://cyberleninka.ru/article/n/organizatsiya-parallelnyh-evolyutsionnyh-vychisleniy-pri-poiske-i-optimizatsii-proektnyh-resheniy]]></source>
  <category auto="true" type="str" verify="true"><![CDATA[Автоматика]]></category>
  <author auto="true" type="list" verify="true">
    <item type="str"><![CDATA[Родзин Сергей Иванович]]></item>
  </author>
  <title auto="true" type="str" verify="true"><![CDATA[Организация параллельных эволюционных вычислений при поиске и оптимизации проектных решений]]></title>
  <keywords auto="true" type="list" verify="true">
    <item type="str"><![CDATA[ЭВОЛЮЦИОННЫЕ ВЫЧИСЛЕНИЯ]]></item>
    <item type="str"><![CDATA[ПАРАЛЛЕЛИЗМ]]></item>
    <item type="str"><![CDATA[РЕПРОДУКЦИЯ]]></item>
    <item type="str"><![CDATA[СЕЛЕКЦИЯ]]></item>
  </keywords>
  <annotation auto="true" type="str" verify="true"><![CDATA[В статье рассматривается базовый цикл алгоритмов эволюционных вычислений. Предлагаются различные способы организации параллелизма: глобальный, миграционный, диффузионный. Приведены рекомендации по распараллеливанию операторов базового цикла эволюционных вычислений.]]></annotation>
  <text auto="true" type="str" verify="true"><![CDATA[В статье рассматривается базовый цикл алгоритмов эволюционных вычислений. Предлагаются различные способы организации параллелизма: глобальный, миграционный, диффузионный. Приведены рекомендации по распараллеливанию операторов базового цикла эволюционных вычислений. Эволюционные вычисления; параллелизм;репродукция; селекция. S.I. Rodzin PARALLEL EVOLUTIONARY CALCULATIONS FOR THE SEARCH AND OPTIMIZATION DESIGN APPROACH This article discusses the basic cycle of evolutionary algorithms for computing. Different ways of parallelism: a global, migration, diffusion. We give recommendations on the paralleliza-tion of operators basic cycle of evolutionary computation. Evolutionary computation; parallelism; reproduction; selection. . и распределенных ресурсов в недетерминированных моделях интеллектуальных систем. Интеллектуальные САПР являются разновидностью интеллектуальных систем. За счет массового параллелизма интеллектуальные САПР могут обеспечить сокращение сроков проектирования, повысить аппаратно-программную на- * Работа выполнена при поддержке: РФФИ (грант № 09-07-00318), г/б № 2.1.2.1652. дежность системы, уменьшить объем передаваемых данных, повысить гибкость системы, динамичность решения задач проектирования. Анализ алгоритмов и моделей, используемых в интеллектуальных САПР, свидетельствует о том, что возможности параллелизма существуют на различных стадиях и этапах проектирования и поиска когнитивных проектных решений [1]. , и решений, так и на уровнях их поиска и обработки. Именно в этих областях особенно заметно влияние вычислительной трудоемкости, поскольку компьютеры с неймановской архитектурой не вполне подходят для решения интеллектуальных задач синтеза проектных решений; они предназначены, главным образом, для последовательной, детерминированной и числовой обработки информации. Трудности возникают как на уровне представления знаний, так и на уровнях управления, компиляции и выполнения проектных процедур. Общепризнанными являются следующие характеристики интеллектуальных САПР: ♦ возможность обработки символьной информации; ♦ недетерминированная последовательность состояний системы; ♦ динамическая память и топология связей в системе; ♦ открытая архитектура; ♦ возможности организации параллельных вычислений, распределенного представления и управления знаниями. Исследуем подробнее возможности организации параллельных вычислений и параллельной обработки проектных решений для широко применяемых в интеллектуальных САПР эволюционных моделей и алгоритмов. Базовый цикл алгоритмов эволюционных вычислений. Эффективным средством решения многих проектных задач синтеза и оптимизации являются алгоритмы и модели эволюционных вычислений: генетические алгоритмы, генетиче-, , -ние, модели поведение роя пчел, стаи птиц, колонии муравьев, модели отжига, потока и другие конкурирующие эвристические алгоритмы [2]. Эволюционные вычисления широко применяются в интеллектуальных САПР. Термин «эволюционные вычисления» (ЭВ) в интеллектуальных САПР подразумевает использование для решения разнообразных задач проектирования и оптимизации совокупности алгоритмических, программных, аппаратных средств и приближенных эвристических методов, инспирированных природными системами, для синтеза структур обработки проектных данных, а также на статистическом подходе к исследованию ситуаций и итерационном приближении к искомому про. , конкурировать с другими методами поиска оптимальных решений по качеству получаемых решений в сочетании с трудоемкостью их получения. Основным элементом системы ЭВ является базовый цикл алгоритма ЭВ. На рис. 1 приводится графическое изображение базового цикла алгоритма ЭВ. Из рис. 1. видно, что базовый цикл включает следующую последовательность шагов: вычисление целевой функции, оценку качества решений, селективный отбор решений и репродукцию, т.е. создание новых решений. Структура базового цикла ЭВ обладает параллелизмом. Распараллеливание возможно как на уровне организации работы алгоритма, так и на уровне его компьютерной реализации. Параллелизм на уровне компьютерной реализации означает вычисление на параллельных системах или процессорах значений целевой функции для разных решений, параллельное выполнение операторов ЭВ, что пропорционально повышает скорость работы алгоритма. На уровне организации работы алгоритма ЭВ параллелизм может достигаться структурированием популяции решений. Рис. 1. Базовый цикл алгоритма эволюционных вычислений Способы организации параллелизма. Оба подхода могут эффективно реализоваться на параллельных вычислителях, причем способы организации параллелизма могут быть различными: глобальный параллелизм, миграционная модель, диффузионная модель [3]. В случае глобального параллелизма речь идет о параллельном вычислении целевой функции и параллельном выполнении операторов алгоритма ЭВ. Целевая функция отдельного индивидуума в популяции, как правило, не зависит от других , - ние. При этом популяция хранится в общей памяти, а отдельный процессор считывает хромосому из памяти и возвращает результат после вычисления целевой . . Если вычислительная система имеет распределенную память, то популяция и « »- , . трудность для распараллеливания представляет процедура селекции. Здесь преимущество в смысле распараллеливания получают те формы селекции, которые не используют глобальную статистику о популяции, например «соревновательные» . , . Миграционный параллелизм наиболее эффективно можно организовать в вычислительных системах с М1МБ-архитектурой путем разделения общей популяции на отдельные подпопуляции, эволюционное моделирование которых осуществляется на отдельных процессорах. Если между отдельными подпопуляциями установить правила миграции отдельных индивидуумов, то получится миграционная модель. Для построения миграционной модели требуется задать количество и разме-, , , также стратегию эмиграции и иммиграции. Размеры и число подпопуляций определяются числом и быстродействием используемых процессоров или транспьюте-, . миграционной модели, то здесь различаются два варианта: «островная» модель, предусматривающая миграцию между любыми подпопуляциями, и модель, предусматривающая обмен индивидуумами между соседними подпопуляциями. Применение того или иного варианта миграционной модели зависит от архитектуры па- ( ). . -рять гетерогенность. Наоборот, при слабой интенсивности миграции и большом числе подпопуляций возрастает вероятность получения нескольких хороших ре, Диффузионный параллелизм эффективно реализуется в вычислительных системах с 81МБ-архитектурой. В этом случае общая популяция разделяется на большое число немногочисленных подпопуляций, а операторы кроссинговера и селекции применяются лишь в ограниченной области, определяемой отношением соседства. Это приводит к тому, что хорошие решения очень медленно распространяются в популяции (диффузия) и проблема попадания в «локадьную яму» становится . Ответ на вопрос о том, какой из представленных способов организации распределенных ЭВ является более эффективным, зависит от архитектуры вычисли, . эффективности является то, насколько успешно решается та или иная проектная задача с точки зрения качества решения и вычислительной сложности. Рекомендации по распараллеливанию операторов базового цикла эволюционных вычислений. Из анализа базового цикла алгоритма ЭВ (см. рис. 1) вытекают следующие рекомендации по распараллеливанию, входящих в него опе-. Рекомендация 1. Две составляющие базового цикла алгоритма ЭВ потенциально могут значительно повлиять на параллелизм: оценка качества решения и репродукция новых решений. Рекомендация 2. Процесс вычисления целевой функции для каждого решения может осуществляться параллельно и независимо от остальных решений. Рекомендация 3. Оценка качества решений может потребовать сложных расчетов или моделирования и является одним из наиболее трудоемких этапов ЭВ. В процессе оценки качества требуется сравнить значения функции качества каждого решения с остальными и обновить структуры данных. Это затрудняет процесс . Рекомендация 4. Выполнение фазы селекции в базовом цикле алгоритма ЭВ может потребовать доступа к определенным подмножествам решений в популяции или обновления данных. Поэтому возможности ее распараллеливания зависят от выбора схемы селекции. Рекомендация 5. Выполнение фазы репродукции в базовом цикле алгоритма ЭВ нетрудно распараллелить. Репродукция может включать либо копирование решения, либо выполнение унарного оператора (например, мутации отдельной хромосомы), либо выполнение бинарного (например, кроссинговера двух хромосом) или я-арного оператора. Выполнение репродукции является независимой задачей. На рис. 2 в общих чертах представлены потенциальные возможности распараллеливания базового цикла алгоритма ЭВ. Рис. 2. Потенциальные возможности распараллеливания базового цикла алгоритма ЭВ Рис. 3. Параллельное выполнение алгоритма ЭВ на двуядерной машине В качестве примера на рис. 3 приводится схема параллельного выполнения базового цикла алгоритма ЭВ на двуядерной машине. Однако поскольку объём популяции решений может быть значительно боль, , -пределяться по процессорам, что неизбежно приведет к образованию очереди заданий и необходимости организации процессов их обслуживания. Такой подход по эффективности может даже уступать обработке заданий на однопроцессорной ма. Распределенный алгоритм будет эффективным только в том случае, если задержки, вызванные передачей и обменом необходимыми данными, будут незначительными. Например, если математическая функция &'дг((х) вычисляется на одном процессоре, а подкоренное выражение х - на др угом, то это займет гораздо больше времени, чем локальное вычисление х и &цг((х). Уточним возможные варианты организации распределенных вычислений для , . организации распределенных вычислений представляется глобальный параллелизм и клиент-серверная схема его реализации. Роль клиента выполняет мастер-процессор, реализующий выполнение основного шага, как это показано на рис. 3. Серверы выполняют вычисление целевой функции и репродукцию, которые могут включать несколько ядер. , , и структурного синтеза большой размерности клиент-серверная архитектура может оказаться не оптимальной. Это произойдет в следующих случаях: ♦ в процессе решения задачи время, необходимое для передачи и обмена данными между клиентом и серверами значительно превышает время, необходимое серверу для выполнения своих задач; ♦ представление решений и объем по пуляции требует значительной памяти, поэтому организация распределенного алгоритма ЭВ строится на основе миграционной или диффузионной модели параллелизма. , , -вать эволюцию в «островных подпопуляциях» на различных узлах в сети компьютеров, каждый из которых представляет один «остров» (крупнозернистый параллелизм). Это позволяет преодолеть отмеченные выше недостатки клиент-серверной архитектуры. Связь между узлами понадобится лишь для миграции между «остро». работающих алгоритмов ЭВ. Правила миграции могут быть выбраны таким образом, чтобы оптимизировать сетевой трафик. Память, требуемая для организации ЭВ на одной машине, уменьшается, каждый узел работает независимо, как это показано на рис. 4. Рис. 4. Параллельное выполнение алгоритмов ЭВ на узлах сети Возможны и другие и другие способы организации параллельных ЭВ. В част, -ектных решений между узлами. Причем в этом случае на различных узлах могут вычисляться различные целевые функции, что, в свою очередь, открывает возможности для решения в процессе проектирования трудных задач многокритериальной . . алгоритмы эволюционных вычислений, инспирированных природными системами. Гетерогенная смесь этих алгоритмов, имеющих общий базовый цикл выполнения композиции эволюционных операторов, будет более эффективной, нежели гомо-. Главные преимущества предлагаемого подхода к организации в интеллектуальных САПР параллельных эволюционных вычислений, инспирированных при, , робастности поиска проектных решений, в широких возможностях распараллеливания операторов эволюции. При этом скорость поиска будет определяться временем работы эволюционного алгоритма и временем достижения решением заданно, -ки локальных экстремумов и способность постоянно от поколения к поколению увеличивать качество популяции решений. , -ностей используемых эволюционных операторов, а наибольшее влияние на скорость эволюционных вычислений, оказывают размеры популяций и хромосом, а также такие особенности целевых функций качества проектных решений как мно-гоэкстремальность (множество ложных аттракторов), «обманчивость», изолированность, дополнительный «шум». ]]></text>
</doc>
