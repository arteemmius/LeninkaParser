<doc>
  <source auto="true" type="str" verify="true"><![CDATA[https://cyberleninka.ru/article/n/arhitektura-raspredelennoy-freymovoy-ierarhii-dlya-postroeniya-intellektualnyh-sistem-raspredelennogo-nakopleniya-i-mnogokratnogo]]></source>
  <category auto="true" type="str" verify="true"><![CDATA[Автоматика]]></category>
  <author auto="true" type="list" verify="true">
    <item type="str"><![CDATA[Сошников Д.В.]]></item>
  </author>
  <title auto="true" type="str" verify="true"><![CDATA[Архитектура распределенной фреймовой иерархии для построения интеллектуальных систем распределенного накопления и многократного использования знаний]]></title>
  <keywords auto="true" type="list" verify="true"/>
  <annotation auto="true" type="str" verify="true"><![CDATA[]]></annotation>
  <text auto="true" type="str" verify="true"><![CDATA[. для решения широкого класса задач. Во многих случаях эти задачи сводятся к распределенному накоплению знаний, обмену знаниями в некотором представлении по сети или использованию распределенных знаний для решения задач. Задачи такого рода возникают при автоматизации интеллектуальной деятельности вирту- альных корпораций, для создания «вир^альных консилиумов» баз знаний, поддерживаемых разными специалистами, при построении крупномасштабных экспертных систем, функционирующих в распределенной среде и др. Традиционный многоагентный подход [Nwana, 1996] (рис.1, слева) к решению задач распределенного искусственного интеллекта не предоставляет готовых , , выбора моделей взаимодействия агентов и программных средств их реализации. Рис.1. Агентная архитектура и архитектура распределенной фреймовой иерархии Кроме того, сложный асинхронный характер взаимодействия в агентной системе в некоторых случаях может оказаться излишне сложным. В то время, как при построении агентных систем внимание, как правило, акцентируется на унифицированном внешнем представлении знаний с целью обмена между агентами различной природы, для некоторых задач представляется разумным базировать принципы распределения знаний на классической многоуровневой модели удаленного взаимодействия, в которой набор интеллектуальных систем или их составных компонентов обменивается знаниями в некотором внутреннем пред. Предлагаемый в работе подход основан на использовании продукционнофреймового представления знаний с распределенной по сети фреймовой иерархией. Такая система может рассматриваться как единая иерархия фреймов, распределенная по сети с помощью некоторого протокола удаленного вызова (см. рис.1, справа), либо как набор взаимодействующих субиерархий — в этом случае оказывается возможным отнести такую архитектуру к классу статических делибератив-ных коллаборативных агентных архитектур . Помимо статического взаимодействия, реализуемого удаленным вызовом, вводится также мобильное взаимодейст-, . * Несмотря на формальную принадлежность к агентным архитектурам распределенная фреймовая иерархия может противопоставляться им из-за меньшей автономии составных частей распределенной системы Для агентных систем внешние по отношению к агентам соглашения о семиотическом согласовании определяются онтологиями, которые могут транслироваться во внутреннее представление знаний агента. Предлагаемый подход является автоонтологичным, т.е. сами компоненты системы задают структуру предметной области. Иерархическая комбинация фреймовых субиерархий по сути дела является одной из естественных реализаций таксономической онтологии, при этом такая иерархия может естественным образом быть расширена продукционными правилами для задания динамики предметной области. Иерархическое фреймовое представление знаний подобно объектноориентированному подходу открывает возможности многократного использования знаний за счет наследования. Наследование от удаленных фреймовых субиерархий позволяет расширять удаленные базы знаний и использовать их для решения более , слотов фреймов позволяет свести к минимуму проблемы согласования баз знаний. 1. Продукционно-фреймовое представление знаний. Архитектура распределенной фреймовой иерархии базируется на продукционно-фреймовом представ, -ем наследования и активными слотами, к процедурам-запросам и процедурам-демонам которых присоединены динамические знания в форме продукционных . статические знания о решаемой задачи в форме значений слотов, структурные знания о предметной области в виде иерархии наследования и динамические знания в виде присоединенных процедур, управляющих логическим выводом. , функцией состояния W: I2—>S, где I — множество идентификаторов, S —множество слотов вида (v,d,{Qi},{Dj},{Ck},<q,<d ,а), включающих в себя текущее значение слота veT и значение по умолчанию deT, множества процедур-запросов {Qi} и {Dj} - <q <d, - во ограничений {Ck} и т.д. Процедуры-запросы Qi являются выражениями из некоторого множества E, а процедуры-демоны — функциями изменения состояния Dj: W^W (где через W обозначено множество функций состояния фреймовой иерар-). T ( - , ) — , это множество представляло собой полную решетку. Отношение наследования : индуцируется слотом с зарезервированным именем parent: F:G ^ ||F(parent)||=G. Таким образом, становится возможным описание , -цессе логического вывода. Типичная для фреймовых систем операция спецификации фрейма по образцу реализуется неявным включением в модель правила F(parent)^ match(F,G). При рассмотрении множественного наследования слот parent предполагается спискового типа, и F:G ^ Ge ||F(parent)||. В основе определения семантики логического вывода лежит рекуррентное определение функции ||-||: CxExW—>TxW, описывающей процесс обратного логического вывода, а также функции целенаправленного прямого вывода Ф<8>: W W. W - ние частичного порядка, относительно которого это множество является полной решеткой. Так как предлагаемая модель вывода является монотонной (о чем говорит монотонность функций вывода по состояниям), то существует естественным образом определяемая семантика неподвижной точки, основанная на последовательном применении функций ||-|| и Ф. Процесс комбинированного вывода может быть также проиллюстрирован как поиск пути в конечном биграфе состояний, факторизованных отношением неразличимости множеством всех посылок правил. Семантика внешнего языка представления знаний описывается путем задания функции Ь: А*—^, преобразующей исходный текст базы знаний в начальное состояние Wo£W, с последующим применением функции ||-|| для логического вы. 2. Распределенная фреймовая система. Под распределенной фреймовой системой мы будем понимать набор функций состояния индивидуальных субиерархий с некоторой выделенной субиерархией Ж = (Щ,...,Щ,-.,Жп}. Синтаксис выражений Е в этом случае расширим операция ми вычисления удаленной ссылки: мобильной 0 и статической ♦. Будем также без ограничения общности предпола- , - . Для функций состояний введем оператор комбинирования * следующим обра- : Ж1(/,э),если (/,я)е Ж1 *Ш2 =Л/,я - Ж2(/,я),если (/,я)е 12; .1, в противном случае. Этот оператор является симметричным и ассоциативным, что позволяет распространить его на случай произвольного числа аргументов. Будем называть Ж =*!¥ =*П=1Щ функцией состояния распределенной фреймовой системы. При этом такая функция будет определять некоторую локальную фреймовую иерар- * , . 3. Семантика распределенного вывода. Логический выв од в распределенной системе может рассматриваться с позиций эквивалентной системы на основании уже определенной семантики, либо введением семантической функции распределенного вывода ||-||: СхЕх Ж —>Тх W, оперирующей над множествами . Для вычисления статических и мобильных ссылок эта функция будет определять взаимодействие составных частей распределенной иерархии: 11° Ж ^, 5)11{ж1,...щ,...,ж,,нЖ II^.^11{Ж1,...,ЩЩ ,...щ Р II г ||Щ(р) я 11{ж1,..,ж,,..,ж,}^(~ ||{Ж1,...,Щ,..Щ ,-,Ж„} . в то время, как для выражений, не содержащих удаленных ссылок, она будет сводится к определенной ранее локальной семантике: * С точностью до операций 0 и ♦, которые при переходе к локальной иерархии можно опустить. Можно показать, что для систем, использующих только мобильное или только статическое взаимодействие, семантика распределенного вывода будет эквивалентна семантике локального вывода в порожденной системе. Для смешанного взаимодействия в общем случае это неверно, однако, можно указать класс нормальных систем (например, исключительно полиморфные системы, в которых используются только правила связанные с одним фреймом, причем явные ссылки на слоты других фреймов отсутствуют, а все обращения к слотам происходят с использованием указателя на текущий фрейм), для которых свойство эквивалентности сохраняется и для смешанного взаимодействия. Подробнее семантика логического вывода в распределенной фреймовой иерархии рассмотрена в [Сошников, 2002]. Заключение. Предложенная архитектура распределенной фреймовой иерархии может эффективно использоваться для решения класса задач, связанных с распределенным накоплением и использованием знаний. На ее основе реализован платформенно-независимый открытый программный инструментарий JULIA (подробнее см. [Soshnikov, 2000]), который, кроме того, обеспечивает интеграцию фреймовой модели с программными компонентами, объектами и реляционными , -тария дополнительными компонентами (стратегиями разрешения конфликтов, функциями, типами данных и т.д.) на языке программирования Java. Инструментарий был использован в ряде реальных программных проектов. В частности, на его основе была разработана информационно-интеллектуальная система диагностики и выработки рекомендаций по лечению больных заболеваниями , урологии ГКБ им. С.П.Боткина [Лукьянов, 2001]. Кроме того, инструментарий использовался для реализации системы онтологического поиска в массивах аннотированных гипертекстов [Сизиков, 2002], при разработке систем дистанционного обучения, планирования рекламных кампаний веб-ресурсов и др. ]]></text>
</doc>
