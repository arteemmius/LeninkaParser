<doc>
  <source auto="true" type="str" verify="true"><![CDATA[https://cyberleninka.ru/article/n/teoreticheskie-i-eksperimentalnye-otsenki-slozhnosti-metodov-lokalnogo-rasprostraneniya-v-zadachah-programmirovaniya-v]]></source>
  <category auto="true" type="str" verify="true"><![CDATA[Автоматика]]></category>
  <author auto="true" type="list" verify="true">
    <item type="str"><![CDATA[Семенов В.А.]]></item>
    <item type="str"><![CDATA[Сидяка О.В.]]></item>
  </author>
  <title auto="true" type="str" verify="true"><![CDATA[Теоретические и экспериментальные оценки сложности методов локального распространения в задачах программирования в ограничениях]]></title>
  <keywords auto="true" type="list" verify="true">
    <item type="str"><![CDATA[МЕТОДЫ ЛОКАЛЬНОГО РАСПРОСТРАНЕНИЯ ЗНАЧЕНИЙ И СТЕПЕНЕЙ СВОБОДЫ]]></item>
    <item type="str"><![CDATA[ПРОГРАММИРОВАНИЕ В ОГРАНИЧЕНИЯХ]]></item>
    <item type="str"><![CDATA[ОЦЕНКИ СЛОЖНОСТИ]]></item>
  </keywords>
  <annotation auto="true" type="str" verify="true"><![CDATA[Обсуждаются вопросы универсальности и эффективности методов локального распространения значений и степеней свободы применительно к задачам программирования в ограничениях. На основе сравнительного анализа обозначаются границы применимости методов и даются теоретические оценки их сложности. Отмечается важность построения и использования комбинированных алгоритмов, обеспечивающих надежное решение широких классов задач за полиномиальное время. Для предложенного комбинированного алгоритма проводятся серии вычислительных экспериментов, моделирующих системы ограничений переменной размерности с разным характером зависимостей по данным. Обсуждаются полученные экспериментальные оценки сложности алгоритма и отмечаются его конкурентные преимущества над традиционными методами локального распространения.]]></annotation>
  <text auto="true" type="str" verify="true"><![CDATA[Семенов В.А., Сидяка О.В. Аннотация. Обсуждаются вопросы универсальности и эффективности методов локального распространения значений и степеней свободы применительно к задачам программирования в ограничениях. На основе сравнительного анализа обозначаются границы применимости методов и даются теоретические оценки их сложности. Отмечается важность построения и использования комбинированных алгоритмов, обеспечивающих надежное решение широких классов задач за полиномиальное время. Для предложенного комбинированного алгоритма проводятся серии вычислительных экспериментов, моделирующих системы ограничений переменной размерности с разным характером зависимостей по данным. Обсуждаются полученные экспериментальные оценки сложности алгоритма и отмечаются его конкурентные преимущества над традиционными методами локального распространения. 1. Введение В последние годы логическое программирование в ограничениях CLP (Constraint Logic Programming) [1] и лежащие в его основе подходы к разрешению систем ограничений CSP (Constraint Satisfaction Problem) [2] получили заметное развитие. Технологии и методы программирования в ограничениях успешно применяются: — при организации “интеллектуальных” графических интерфейсов пользователя, предусматривающих специальные правила для эргономичного расположения оконных элементов на экране [3,4]; — в активных базах данных для определения полных (удовлетворяющих все условия целостности) и корректных (исключающих зацикливание) политик каскадного обновления семантически связанных элементов данных [5]; — в системах CAD/CAM/CAE для решения разнообразных инженерных задач, требующих автоматического и согласованного пересчета параметров модели в зависимости от решений пользователя, принимаемых в ходе рабочей сессии [6, 7]. Парадигма программирования в ограничениях, основанная на непосредственной интерпретации прикладной задачи в терминах переменных, множеств допустимых значений и систем ограничений, оказалась привлекательной и конструктивной для построения сложных вычислительных приложений, в процессе выполнения которых возникает необходимость динамической идентификации и решения разнообразных математических задач алгебраического типа. Данная парадигма предполагает, что программист описывает прикладную задачу путем декларирования переменных и отношений между ними и полностью освобождается от написания императивной части программного приложения, ответственной за решение задачи с использованием тех или иных алгоритмов. Поскольку описываемые формальным образом ограничения могут иметь вид уравнений, неравенств или логических выражений самого общего вида, анализ зависимостей между переменными, идентификация типа математической задачи, а также ее непосредственное решение требуют целого арсенала математических методов и программных средств. Для разрешения ограничений обычно применяются альтернативные подходы. Численный подход [8] использует предварительную редукцию исходной системы ограничений к системе нелинейных алгебраических уравнений или к задаче условной нелинейной оптимизации. В зависимости от характера зависимостей задачи могут решаться разнообразными прямыми и итерационными методами, в частности, методами квазиньютоновского типа, методами сопряженных градиентов, методами матричной факторизации, симплекс-методом. Невысокая эффективность подхода объясняется проблемами локальной и глобальной сходимости итерационных методов для нелинейных систем ограничений, а также высокой сложностью прямых методов при решении линейных задач. Вместе с тем, при наличии сложных зависимостей между переменными данный подход часто оказывается единственно возможным. Символьный [9] подход предполагает те же редукционные схемы, однако математические задачи решаются методами, основанными на символьных преобразованиях. В случае нелинейных ограничений общего вида время символьного решения растет экспоненциально с ростом числа ограничений. При этом шансы на успешное разрешение всех ограничений обычно невысоки. Для систем специального вида символьные методы могут дать заметный выигрыш. Кластеризация [10] подразумевает декомпозицию исходной системы ограничений на подсистемы таким образом, чтобы обеспечить разрешимость каждой из них относительно внутренних переменных. Тогда последовательным обходом подсистем можно попытаться удовлетворить все ограничения исходной системы. При наличии изолированных групп 118 переменных кластеризация существенно упрощает и ускоряет процесс решения. В ряде случаев ее целесообразно применять в сочетании с методами анализа и идентификации типов математических задач, связанных с выделенными подсистемами ограничений. Методы локального распространения [11-13] составляют наиболее распространенный и перспективный подход к решению больших систем ограничений, для которых известны или могут быть выведены альтернативные правила явного разрешения одних переменных относительно других. Как правило, современные реализации методов предусматривают предварительный этап планирования решения, на котором определяется порядок и способ разрешения ограничений, и этап непосредственного решения, на котором план, представленный в виде последовательности правил, применяется для расчета неизвестных переменных. Единожды построенный план может многократно использоваться для решения подобных задач в инкрементальной постановке, допускающей частичное изменение системы ограничений и их параметров. Различают методы локального распространения значений и степеней свободы. В методе локального распространения значений часть переменных принимается в качестве параметров задачи, через которые могут быть последовательно выражены остальные неизвестные. Пусть, например, задана система ограничений Х1 + х2 = х3 и Х1 + х2 + х3 = х4, и переменные Х1 и х3 выбраны в качестве параметров задачи. Тогда остальные неизвестные могут быть найдены путем последовательного применения правил х2 = х3 - х1 И х4 = х1 + х2 + х3. В методе локального распространения степеней свободы [11] происходит последовательный поиск и исключение групп свободных переменных и ассоциированных с ними ограничений. Свободные переменные — переменные, входящие лишь в одно ограничение исходной системы и участвующие в качестве выходов одного из его решающих правил. Найденное правило добавляется в начало плана решения, а процесс продолжается до тех пор, пока не исчерпаны все ограничения исходной системы и остаются свободные переменные. В разделе 2 мы рассмотрим формальную постановку задачи в ограничениях, разрешимую для методов локального распространения, и обоснуем ее оценки сложности. В разделе 3 приведем алгоритмические версии методов локального распространения значений и степеней свободы и построим комбинированный алгоритм, сочетающий элементы двух методов. Раздел 4 посвящен представлению и анализу результатов вычислительных экспериментов, убедительно доказывающих преимущества комбинированного алгоритма над традиционными методами локального распространения. 2. Задачи в ограничениях Задачи в ограничениях обычно описываются путем определения множества неизвестных переменных и алгебраических зависимостей между ними. При этом процесс решения заключается в локализации областей значений переменных или в поиске значений, удовлетворяющих заданным зависимостям. Будем рассматривать только ограничения потока данных. Подобные ограничения могут разрешаться на основе предварительно выведенных или заданных правил. Каждое такое правило предоставляет метод разрешения ограничения с сигнатурой, определяющей, какие переменные задачи являются его входными параметрами, а какие — выходными. Каждое правило при этом имеет хотя бы один выходной параметр, подлежащий модификации в результате применения правила и разрешения соответствующего ограничения. 2.1. Формальная постановка Итак, пусть задано множество переменных х = {х1. | г = 1..«} и система ограничений на нем с = ^ (X ) | у = \.т,Х] с1[ Будем считать, что для каждого ограничения системы с. е С известен соответствующий набор правил К. = ^{Х’ЦЛГ) Iк =1 * Л с ХрХТ £ х рХ1 ^ХТ = 01 разрешения относительно переменных, участвующих в них в качестве входных и выходных параметров. Задача стоит в нахождении плана решения в виде последовательности правил т f к] Л ^ ^■{1 т}->У УЛ > удовлетворяющей следующим условиям: Ч*=1]к) 1. последовательность правил полна для разрешения всех ограничений исходной системы V; е {1..т}Эу е {1 ,.т} \ ^(у) е Л,; 2. последовательность правил неконфликтна и исключает случаи повторной модификации установленных переменных и нарушения разрешенных ограничений системы. Формально данное условие выражается как {Хоит ^ Х°ит ~ 0 м* к.. Л],к,Г^Л]„к„ Задача предыдущего раздела формально представляется как система ограничений относительно множества неизвестных переменных X = {х1,х2,х3,х4}- С1 : х1 + х2 = х3 Сп : х, + хп + х, = х. .Необходимые решающие правила могут быть заданы, например, следующим образом: Кп = х3-х2,К12 : х2 =х3 : х3 = ^ + х2 : х, = х. - х. - х,; : х0 = х, - х, - х,; : х, = х, - х, - х.; : х, = х, + х0 + х, Планом решения данной задачи является £ = {К13,К24}. Можно заметить, что решение не единственно. Например, £ = {і?п,і?24} также является планом ее решения. 2.2. Визуальное представление задачи и плана решения Естественным визуальным представлением задачи в ограничениях является двудольный ненаправленный граф С(Х,С,К) [2-5], где X - множество вершин, ассоциированных с переменными задачи, С - множество вершин, ассоциированных с ограничениями задачи (на рисунках ниже отображены большими кругами), и і? - множество ненаправленных ребер графа, соединяющих вершины ограничений с соответствующими вершинами переменных. Переменная задачи, участвующая в некотором ограничении, отображается ребром, соединяющим соответствующие вершины двудольного графа. Результатом решения задачи в ограничениях является план в виде последовательности правил, каждое из которых приводит к удовлетворению одного из ограничений исходной системы. План решения визуально отображается на графе с помощью направленных ребер. Комбинация ориентаций ребер, инцидентных вершине некоторого ограничения, определяет для него сигнатуру решающего правила. Входные параметры правила отображаются на графе ребрами, входящими в вершину ограничения, а выходные — ребрами, выходящими из нее. Ребра переменных, участвующих в ограничении, но не задействованных в выбранном правиле его разрешения, исключаются из представления графа. Двудольный ориентированный граф плана решения исходной задачи в ограничениях, представимой в виде С(Х,С,К), обозначим как П(Х,С,К). Принцип разрешимости задач в ограничениях также имеет прозрачную визуальную интерпретацию. Задача разрешима, если план ее решения, полученный в виде П(Х,С,Я), не содержит циклов и каждая его вершина, ассоциированная с переменной задачи, имеет не более одного входящего ребра. Циклом в данном случае называется упорядоченный набор пар вершин х С х С ... х С є С такой, что вершины-переменные ^ П 2 ^ и3 ^ ^4 ^ ^ ^к-1 ^ ^к хх х є X и вершины-ограничения С С С є С соединены И] 5 Из’'''’ Пк_: А А п2 5 пк последовательно направленными ребрами от вершины Хп к вершине с для всех 7 = 1..А'-1, от вершины Сп к вершине хп для всех / = 2. .А- — 2 , и от вершины Сп к вершине хп • (а) (б) Данные условия гарантируют, что существует конечная неконфликтная последовательность правил, применяя которую, можно разрешить все ограничения исходной системы. Назовем задачу потенциально разрешимой, если она разрешима, однако существует, по крайней мере, один циклический план решения 0(Х,С,И). Для задачи, неразрешимой в обсуждаемой постановке, не может быть построен ациклический план решения С(Х,С,К). 2.3. Вычислительная сложность задачи в ограничениях Обсудим вопрос вычислительной сложности задач в ограничениях потока данных [14, 15]. Как правило, подобные задачи недоопределены, что приводит к существованию большого числа решений, а наличие альтернативных правил для каждого ограничения исходной системы обуславливает и 122 многовариантность способов их нахождения. Покажем, что задача в обсуждаемой общей постановке является ЫР-полной в силу того, что частные постановки также не разрешимы за полиномиальное время. С этой целью рассмотрим классическую задачу раскраски графа в к цветов и переформулируем ее в терминах эквивалентной задачи в ограничениях. Каждой вершине графа поставим в соответствие некоторую переменную задачи, означающую ее цвет, а каждому ребру — ограничение в виде условия несовпадения цветов, связанных с инцидентными вершинами. Каждое такое ограничение можно удовлетворить одним из к (к — 1) правил, каждое из которых перекрашивает две инцидентные вершины в разные цвета. Сформулированная задача в ограничениях имеет решение тогда и только тогда, когда исходный граф имеет раскраску в к цветов, что доказывает их эквивалентность и ЫР-полноту обсуждаемой задачи. Известно, что в общем случае задача в ограничениях не решается эффективно, однако при переходе к частным упрощенным постановкам возникают альтернативные возможности, обеспечивающие поиск решения за полиномиальное время. В данной работе мы строим комбинированный алгоритм, который, с одной стороны, гарантирует решение в самой общей постановке, а с другой стороны — осуществляет поиск решения за полиномиальное время в частных, но распространенных на практике случаях. 3. Основные алгоритмы локального распространения Прежде всего, приведем базовые алгоритмы для методов локального распространения значений и степеней свободы, на которых будет основываться предложенный комбинированный алгоритм. 3.1. Алгоритм распространения степеней свободы Алгоритм распространения степеней свободы [11] гарантированно находит решение за полиномиальное время, если оно существует, и информирует об его отсутствии в противном случае. Однако постановка задачи имеет одно принципиальное уточнение — переменные каждого ограничения исходной системы должны участвовать во всех правилах его разрешения в качестве входных или выходных параметров. Данное условие выражается формальным образом: для любого ограничения системы УСДХ^еС, / = 1.т и для любого его правила ,Х°ит) е Я, к = \..к] имеет место Х%иХ™=Хг Ниже приведена поэтапная схема алгоритма. 1. Инициализируем план решения Б = 0 . 2. Формируем подмножество всех свободных переменных задачи Гс1. Напомним, что свободной называется переменная, входящая лишь в одно ограничение исходной системы и участвующая в качестве выхода одного из его решающих правил. Формальное определение свободной переменной выглядит следующим образом: 3. Выбираем произвольную свободную переменную х'еХ' и устанавливаем ассоциированное с ней ограничение с\, {х'} = Xу (в силу условий задачи оно всегда единственно). 4. Выбираем решающее правило л для ограничения с с фактическим выходным параметром-переменной ¡У; = Х°^т ■ Добавляем правило в начало плана решения £. 5. Корректируем представление задачи, удаляя переменную х и связанное с ней ограничение с у ■ Обновляем подмножество свободных переменных Гс! с учетом проведенных изменений. 6. Если X' ф 0, то переходим к пункту 3 и выбираем следующую свободную переменную. 7. Если множество ограничений в текущем представлении задачи исчерпано (С =0), то план решения найден. Если множество ограничений не исчерпано (С Ф0), то плана решения не существует. Итак, имеет место следующее утверждение о корректности приведенного алгоритма. Теорема. Алгоритм распространения степеней свободы завершает работу либо когда план решения найден, либо когда план не существует. Доказательство. □ Доказательство корректности алгоритма сводится к доказательству двух вспомогательных утверждений: a. Если алгоритм завершил работу при исчерпании всех ограничений, то построенный план решения корректен. b. Если алгоритм завершил работу при оставшихся ограничениях, то задача не разрешима. 3/ е (1 ..да) : х’ с Л : / с (1 ..да),; Ф / :х'г!; Для доказательства первого утверждения перенумеруем все ограничения и переменные исходной системы сквозным образом в порядке, обратном исключению свободных переменных и ассоциированных с ними ограничений так, чтобы ограничения непосредственно предшествовали исключаемым переменным. Иными словами, перенумеруем их в соответствии с порядком применения правил в построенном плане решения. Тогда переменные, не являющиеся выходными параметрами ни одного из правил плана решения, окажутся в самом начале списка. При подобном расположении все ребра в графе плана имеют направление от элементов (переменных и ограничений), располагающихся выше по списку, к элементам (ограничениям и переменным соответственно) ниже по списку, что исключает циклы в графическом представлении плана. В самом деле, данному направлению соответствуют все ребра графа, а именно: — ребра, соединяющие ограничения и выходные переменные правил, примененных для их разрешения; — ребра, инцидентные переменным, которые не использовались в качестве выходов ни одного из решающих правил плана и, поэтому, оказались в самом начале списка; — ребра, инцидентные переменным, которые использовались в качестве выходов одного из решающих правил плана, но были удалены в ходе его построения и поэтому не могли служить входными параметрами для правил разрешения ограничений, находящихся выше по списку. Доказательство второго утверждения основывается на следующих рассуждениях относительно наличия циклов в графическом представлении плана. Во-первых, построенный без циклов план должен иметь хотя бы одно правило с выходными переменными, не используемыми в качестве входных параметров других правил. Если такого правила не существует, то путь в графе плана, проведенный от некоторого ограничения к выходным переменным и затем от них (которые по предположению существуют) к входным параметрам следующих ограничений, неизбежно замкнется. Во-вторых, в построенном графе без циклов не может быть вершины-переменной с несколькими входящими ребрами от разных ограничений. Ограничение, имеющее в качестве выхода переменную без выходных ребер, в качестве выходов имеет только свободные переменные. Поэтому, если в результирующем графе нет ограничения со свободными выходными переменными, то план решения не может быть представлен графом без циклов. ■ 3.2. Алгоритм распространения значений, основанный на оценке перспективности выбираемых правил Обсудим метод локального распространения значений и построим его алгоритмическую версию, использующую дополнительную спекулятивную оценку перспективности выбираемых правил. Подобная оценка позволяет выстраивать план решения локальным образом, но с учетом перспективы разрешения ограничений, анализируемых на последующих этапах алгоритма. В основе оценки лежат следующие общие соображения. Во-первых, любые два правила плана не могут иметь общие выходные параметры. В противном случае ограничение, удовлетворенное первым, может быть нарушено при попытке разрешения второго ограничения и связанной с ней повторной модификации выходной переменной. Во-вторых, правила, использующие некоторые переменные в качестве входных, должны выполняться строго после правил, для которых эти переменные являются выходными параметрами. На каждом шаге обсуждаемого алгоритма проводится оценка зависимостей и выбирается то правило, применение которого гарантирует разрешимость любого из оставшихся ограничений. Тем самым, процесс планирования решения, реализуемый алгоритмом, всегда оказывается перспективным и может быть продолжен, по крайней мере, на последующем шаге разрешения очередного ограничения. Ниже приводится пошаговая схема алгоритма, предполагающая последовательное разрешение ограничений задачи методом локального распространения значений. В случае успеха алгоритмом обрабатывается очередное ограничение, в противном случае — осуществляется возврат к предыдущему шагу и предпринимается попытка внести изменения в план решения. Алгоритм программно реализуется, используя аппарат рекурсивных функций. 1. Формируем упорядоченные множества разрешенных и неразрешенных ограничений задачи С' = 0 и С" = С соответственно. Устанавливаем номер итерации г = О (совпадающий с количеством разрешенных ограничений в системе г-=|с'|). 2. Инициализируем переменную цикла у = 0 для перебора неразрешенных ограничений из множества С". 3. Устанавливаем индекс текущего обрабатываемого ограничения 7=7+1- 4. Если у>|с"|, то множество исчерпано и на данной итерации не удалось удовлетворить ни одно ограничение. В этом случае, если множество разрешенных ограничений С' пусто, то это означает, что перебраны все варианты, план решения не существует и следует завершить работу. Если С ф 0, то последнее разрешенное ограничение перемещается из множества С' обратно в С" и осуществляется возврат к предыдущей итерации с номером г = г -1, к пункту 7. 5. Пытаемся разрешить ограничение С" • Для этого формируем множество перспективных правил л’ с: Н/• Перспективными считаются те правила, при включении которых в план решения, каждое из оставшихся ограничений С" может быть удовлетворено, по крайней мере, с помощью одного правила. То есть, Л]к е д* о \/С. е С"31: Х°ит оХ°ит = 0 &Х°ит п!"=0 6. Инициализируем переменную цикла к = О для просмотра всех перспективных правил из множества л*. 7. Устанавливаем индекс текущего правила к = к +1. Если > |д*| и множество перспективных правил исчерпано (Н = 0) при попытке разрешить текущее ограничение, то переходим к пункту 3 с целью анализа другого ограничения. 8. Выбираем правило л" <=л* и добавляем его в план решения Л*к е 51 • Перемещаем разрешенное ограничение с" из множества С" в С'. Переходим к следующей итерации алгоритма 1=1 +1. 9. Если все ограничения разрешены и С" = 0, то план решения найден. В противном случае переходим к пункту 2 для дальнейшего планирования решения. Теорема. Алгоритм распространения значений заканчивает свою работу, либо когда план решения найден, либо когда он не существует. Доказательство. □ Алгоритм строит корректный план решения, выстраивая правила разрешения ограничений в порядке, исключающем конфликты. Если план решения алгоритмом не обнаружен, то его действительно не существует, поскольку в худшем случае алгоритм перебирает все варианты его построения за исключением заведомо некорректных, приводящих к образованию циклов в графе плана решения. ■ Как было отмечено, задача разрешения ограничений в общей постановке является ЫР-полной. Приведенная алгоритмическая версия метода распространения значений также имеет экспоненциальную оценку сложности 127 в худшем случае, однако позволяет уменьшить число анализируемых вариантов планирования решения за счет исключения заведомо неперспективных. 3.3. Комбинированный алгоритм разрешения ограничений Построим комбинированный алгоритм, который гарантировал бы решение задачи в самой общей постановке с использованием метода распространения значений, однако осуществлял бы это более эффективным образом при наличии в задаче особенностей, допускающих применение метода распространения степеней свободы. С этой целью в предлагаемом алгоритме будем привлекать метод распространения степеней свободы всякий раз, когда есть возможность исключить свободные переменные, а при ее отсутствии — использовать универсальный метод распространения значений со спекулятивной оценкой перспективности выбранных правил. Комбинированный алгоритм работает следующим образом: 1. Определяются переменные, входящие только в одно ограничение исходной системы. 2. Проверяется, есть ли у этих ограничений правиламетоды, которые на выходе имеют только переменные, найденные в п. 1. 3. Если есть, то переменные считаются свободными, и ограничение разрешается по методу, найденному в п. 2. 4. Если свободных переменных нет, то включается поиск решения, основанный на определении неперспективности применения правил. В каждой итерации поиска, если появляется свободная переменная, то соответствующее ограничение разрешается по правилу, выход которого состоит из свободных переменных. 4. Вычислительные эксперименты Комбинированный алгоритм, как и базовый метод распространения значений, в худшем случае перебирает все варианты решения за экспоненциальное время. Однако на практике алгоритм демонстрирует полиномиальные оценки сложности в случаях, допускающих эффективную редукцию исходной системы ограничений на основе метода распространения степеней свободы. Ниже приводятся результаты вычислительных экспериментов, демонстрирующие время работы алгоритма в зависимости от числа ограничений и переменных в исходной системе, а также его асимптотическую сложность на наборе тестовых задач. В качестве первой тестовой задачи была выбрана система ограничений переменной размерности п следующего вида: (а) Рис. 2. Время работы алгоритма в зависимости от количества ограничений (а) и его оценка сложности 0(х" ) (б) при прямом порядке задания ограничений (а) (б) Рис. 3. Время работы алгоритма в зависимости от количества ограничений (а) и его оценка сложности 0(х3) (б) при обратном порядке задания ограничений (б) Рис. 4. Время работы алгоритма в зависимости от количества ограничений (а) и его оценка сложности 0(х3) (б) при произвольном порядке задания ограничений *i =/i(*o) *2 =/2 (*0^1) (l) л', y,( v„..vl..,) Структура зависимостей между переменными данной задачи подобна портрету нижней треугольной матрицы Якоби для соответствующей системы алгебраических уравнений. Поскольку время работы алгоритма зависит от порядка, в котором задаются ограничения системы и правила их разрешения, было проведено несколько серий экспериментов. Результаты экспериментов с прямым, обратным и произвольным порядком задания ограничений и соответствующих правил разрешения представлены на Рис. 2, 3 и 4 соответственно. Прямой порядок соответствует способу нумерации ограничений в приведенной выше системе сверху вниз (1), обратный — нумерации в противоположном направлении снизу вверх, а произвольный — нумерации на основе матрицы перестановок, сгенерированных случайным образом. Полученные результаты подтверждают полиномиальную сложность комбинированного алгоритма на рассмотренном классе задач, причем алгоритм демонстрирует квадратичную асимптотическую сложность при прямом порядке задания ограничений и характерную кубическую — при обратном и произвольном порядке. Эксперименты проводились на персональном компьютере типовой конфигурации с процессором Core 2 Duo Е8400 (3.00 GHz) и оперативной памятью 2GB (800 MHz). Время работы алгоритма представлено на графиках в миллисекундах CPU. 130 В качестве альтернативной тестовой задачи использовалась система ограничений переменной размерности п с фиксированным максимальным числом параметров к: Выбранная задача эквивалентна системе алгебраических уравнений с диагональной матрицей Якоби шириной к . Проведенные эксперименты показывают существенное влияние числа параметров в ограничениях на время работы алгоритмов, что объясняется анализом большего числа зависимостей по данным при выборе каждого очередного правила. Не менее важной представляется установленная линейная сложность комбинированного алгоритма для данной задачи в отличие от метода распространения значений. Существенный выигрыш комбинированного алгоритма объясняется эффективной редукцией исходной системы ограничений в результате исключения свободных переменных базовым методом распространения степеней свободы. Как видно из графиков, приведенных на Рис. 5, выигрыш на задачах типовой размерности может составлять несколько порядков и продолжает расти с увеличением размерности задачи. Наконец, приведем тестовую задачу, которая служит иллюстрацией того, что использование комбинированного алгоритма не налагает каких-либо дополнительных условий на постановку задачи в ограничениях в отличие от алгоритма распространения степеней свободы. Тем самым, более высокая эффективность алгоритма не является следствием сужения границ его применимости или снижения надежности. *1 = *2 =/2 (ЛЬ*!) Ч+\ =Л+1(*1>*2>-,**) (а) (б) Рис. 5: Время работы комбинированного алгоритма (а) и алгоритма распространения значений (б) в зависимости от количества ограничений при разных значениях параметра к=50, к=10, к=1 (верхние, средние и нижние кривые на графиках соответственно) (3) Рассмотрим систему ограничений • (/ц(хо)“х\)(/\2(х\> “хг) = О О? • (/21 (Х1) “ х2 Х/22 (х2)“ хз) = О Сп '■ (/п1 (ХП-1 )~х„) = О со следующим набором правил разрешения: ^11 • Х1 =/ц(хо)-^12 • х2 = /\2^Х1У-К-21 -Х2 = /2ЛХ\У-^22 • х3 = /22^х 2 )• К,Л -хп =ЫХп-\У- В подобной постановке не выполняется условие вхождения всех переменных ограничения в каждое из его правил, которое необходимо для гарантированного поиска решения с помощью метода распространения степеней свободы. При работе данный алгоритм диагностирует невозможность найти план решения, хотя он существует. Комбинированный алгоритм справляется с задачей благодаря привлечению метода распространения значений. Примечательно, что решение находится за линейное время. (4) 5. Заключение Таким образом, рассмотрены вопросы применения методов локального распространения к задачам программирования в ограничениях. Предложенный комбинированный алгоритм сочетает в себе элементы метода распространения степеней свободы и метода распространения значений, обеспечивая надежное решение широких классов задач за полиномиальное время. Проведенные серии вычислительных экспериментов и полученные экспериментальные оценки сложности комбинированного алгоритма подтверждают его конкурентные преимущества над традиционными методами, что обуславливает его использование в перспективных системах программирования в ограничениях. ]]></text>
</doc>
