<doc>
  <source auto="true" type="str" verify="true"><![CDATA[https://cyberleninka.ru/article/n/postoroenie-marshrutov-vypolneniya-po-bez-ishodnyh-kodov]]></source>
  <category auto="true" type="str" verify="true"><![CDATA[Автоматика]]></category>
  <author auto="true" type="list" verify="true">
    <item type="str"><![CDATA[Благодаренко А.В.]]></item>
  </author>
  <title auto="true" type="str" verify="true"><![CDATA[Постороение маршрутов выполнения по без исходных кодов]]></title>
  <keywords auto="true" type="list" verify="true"/>
  <annotation auto="true" type="str" verify="true"><![CDATA[]]></annotation>
  <text auto="true" type="str" verify="true"><![CDATA[Существуют ситуации, когда анализ ПО на наличие уязвимостей предпочтительнее делать по исполняемому коду [1,2]. Для этого необходимо провести ряд процедур, в том числе и построение маршрутов выполнения. Под маршрутом понимается последовательность команд, выполняющихся при отработке какого-либо действия, входящего в функциональность программы. Например, если ПО обрабатывает файл определенного формата, то можно говорить о маршрутах, выполняемых при его разборке и выполнении. Для удобства последующего анализа, выявленный маршрут должен быть представлен на фоне общей картины ПО. Так, если исследование производится с использованием исходных кодов, можно показывать принадлежность участка кода к структурной единице (функции, модулю, классу). Такая функциональность требует проведения * Работа поддержана грантами РФФИ № 07-07-00138, №06-07-89010. Известия ЮФУ. Технические науки Специальный выпуск предварительного статического анализа с целью выделения подобных структурных единиц (подобной функциональностью обладает анализатор исходных текстов “Аист-С”). То же самое справедливо и для тестирования ПО без исходных текстов, однако необходима дополнительная процедура - дизассемблирование. Далее следует статический анализ дизассемблированного листинга, который позволяет выделить функции, а также связи между ними. Для возможности покрытия множества маршрутов исполнения в вышеописанную схему необходимо добавить генератор входных воздействий. Воздействия могут генерироваться автоматически либо специалистом. Предложенная схема будет реализована в инструментальном средстве для анализа уязвимостей программных средств без исходных кодов. В основу инструментального средства легла идея отладчика, описанная в работе [3]. ]]></text>
</doc>
