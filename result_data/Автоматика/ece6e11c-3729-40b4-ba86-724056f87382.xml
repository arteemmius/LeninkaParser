<doc>
  <source auto="true" type="str" verify="true"><![CDATA[https://cyberleninka.ru/article/n/tehnologiya-razrabotki-prilozheniy-dlya-mobilnyh-ustroystv-na-platforme-j2me]]></source>
  <category auto="true" type="str" verify="true"><![CDATA[Автоматика]]></category>
  <author auto="true" type="list" verify="true">
    <item type="str"><![CDATA[Селянкин В.В.]]></item>
    <item type="str"><![CDATA[Нгуен Фыонг]]></item>
  </author>
  <title auto="true" type="str" verify="true"><![CDATA[Технология разработки приложений для мобильных устройств на платформе j2me]]></title>
  <keywords auto="true" type="list" verify="true"/>
  <annotation auto="true" type="str" verify="true"><![CDATA[]]></annotation>
  <text auto="true" type="str" verify="true"><![CDATA[Программно-аппаратные среды. Версия языка Java для микропроцессорных устройств (Java 2 Micro Edition, J2ME) компании Sun Microsystems и среда для беспроводных приложений (Binary Runtime Environment, BREW) компании Qualcomm представляют собой новые технологии онлайнового беспроводного дос, . дальнейшем могут выполняться в офлайновом режиме и могут использоваться для загрузки из Интернета других данных. Обе технологии дают разработчикам возможность создавать и распространять новые беспроводные приложения с богатейшими функциональными возможностями. Основные преимущества J2ME и BREW - это эффективный пользова-, , также возможность загрузки и хранения приложений для их последующего запуска в офлайновом режиме, что позволяет избежать необходимости постоянного соединения с сетью. J2ME - Java- , - ния в небольших бытовых и встроенных устройствах, которые имеют ограниченные возможности в отношении производительности процессора, объема памяти, размера и разрешения экрана, а также скорости и объема вводимой информации. В языке J2ME определено две конфигурации. Одна представляет собой ограниченную конфигурацию (Connected Limited Device Configuration, CLDC). Она предназначена для устройств с ограничениями по производительности процессора, памя- . Java- , , Раздел IV. Новые информационные технологии это высокооптимизированная виртуальная K-машина (KVM). KVM для функционирования достаточно 130 Кбайт памяти. Уровень профилей определяет набор прикладных программных интерфейсов (API) для конкретной категории устройств. Приложение, написанное для опре, , -держку данного профиля. Профиль мобильных информационных устройств (Mobile Information Device Profile, MIDP) соответствует мобильным беспроводным , PDA. - , , данных и возможностями работы в сети (HTPP). BREW - , CDMA . BREW Java- , , разработке не ставилась цель обеспечить переносимость программного обеспечения с одного устройства на другое и в настоящее время функционирует только для мобильных CDMA-устройств, использующих процессоры компании Qualcomm. Платформа обеспечивает базовые возможности для таких сервисов, как GPS, VoIP, Bluetooth 1.1, MP3 и MIDI. Тот факт, что BREW работает на аппаратном уровне, , J2ME, - муникационные возможности мобильных устройств. Средства и технология реализации игр. Учитывая огран иченность ресурсов реализации на беспроводных устройствах, в качестве основной конфигурации J2ME выбирается CLDC. Она является основой для построения API MIDP. Классы CLDC , , J2ME. не часто приходится работать с этими классами непосредственно, но для реализации определенных функций на отдельных устройствах придется работать с этими классами низкого уровня. При развитии устройств и платформ доступ к классам , , . J2ME - MID- - - жениями Java, которые запускаются под контролем Java VM. Запуск, остановка и Java - жениями (application management software, AMS), которые находятся на этом уст. AMS , - . Перед началом разработки необходимо создать структуру директорий, кото- MID- . MID- - MID- . программы необходимо выполнить ее компиляцию, убедившись в том, что список командных путей среды оболочки включает маршрут к директории, в которой со-J2ME . . MID- включает 2 объекта: архивный файл Java файлов MID-лета и необязательный файл . Manifest - MID- , JAR- . JAR- утилиты JAR J2SE. В процессе отладки выполнение приложения обычно производится на эмуляторе реального мобильного устройства. Одним из положительных качеств эмулятора является то, что он может одновременно имитировать несколько реальных устройств разного типа. Если среди имитируемых мобильных устройств нет нуж-, « », параметры которого представляют устройство с некоторыми средними возможно. MID- - . MIDP . startApp(), pauseApp() destroyApp() MID- - . В основе низкоуровневого интерфейса пользователя лежит использование Canvas, . paint() - - . Canvas совместим со стандартными классами Screen, и приложение может использовать , . Canvas - ды обработки игровых событий, событий от кнопок и событий от механизма пози-( ). - . Canvas высокоуровневые команды и устанавливать один блок прослушивания команд на Canvas, . Canvas CommandListener . Нажатие на любую клавишу клавишной панели приводит к формированию двух клавишных событий: событие нажатия клавиши и событие отпускания клавиши. Эта программа выводит информацию о событиях отпускания клавиши. Информация о клавишном событии включает название клавиши, код клавиши и, возможно, связанное с ним обозначение игрового действия. Игровые действия отражены на других клавишах, потому что большинство устройств не имеет клавиш или кнопок специально для игр. Значение игрового действия соответствует одному или более кодам клавиш, являющихся двоичными значениями, каждое из которых однозначно соответствует клавише. Canvas , - . должны привлекать помощь класса Graphics. Основная цель класса Graphics за- Canvas. Graphics , ( Java) - Canvas. всех объектов класса Screen, но не для объектов Canvas. В низкоуровневом API Canvas , на перерисовку могут быть обработаны в одном вызове. Когда приложение вызывает метод Display.setCurrent(), он запрашивает реализацию об отображении Displayable. Canvas - paint (Graphics g). - реннее событие рисования, которое пересылается в текущий отображаемый эле. Во время отображения некоторая группа пикселей дисплея может быть недействительной или поврежденной. Недействительный или поврежденный пиксель - , не должен быть визуализирован в данной текущей операции рисования. Дисплей может быть поврежден другим MID-летом или даже «внешним» приложением, , , отображения получения сообщения SMS мобильным телефоном. Перед тем, как , Canvas , , . экран, обновляя недействительные пиксели. Graphics - . Graphics некоторую точку, отличную от левого верхнего пикселя. В технологии разработки приложений используется двойная буферизация, которая относится к технике буферизации графического контекста перед его отображением. Эта идиома требует использования двух графических контекстов (бу-). , а затем копируется его содержимое в графический контекст, представленный дис. буфером. Внеэкранный буфер не отображается на дисплее. Такая технология определяется ограниченностью производительности устройства. Двойная буферизация позволяет получить быстрое обновление дисплея, что устраняет его мерцание. Операция копирования обычно занимает меньшее , . Canvas. API приложений. Методы могут быть вызваны из обработчиков событий, обработчика таймера или из потоков приложения. Кроме того, реализация API не блокирует . - serviceRepaints() Canvas. paint(), , , . paint() , serviceRepaints(), - ние попадет в клинч. Для синхронизации с событиями используется метод callSerially() Display, - вия с обработкой событий. API MIDP . , , - , - - рациям на экране. Событие - это проявление результата действия. События могут представлять собой вызов команды в ответ на действие пользователя. MIDP - гими инструментариями графического пользовательского интерфейса. Блок про-(command listener) , - домления о наличии команд. Блоки прослушивания команд регистрируются для получения уведомления о командах. Некоторые внешние действия такие, как на, MIDP, событие и связывая его с отображаемым в настоящее время экраном. В конкретный момент времени на экране можно отображать только один Displayable ( ). - ности экранных ресурсов устройства. Существует простая идиома экранной нави, . , , -(current displayable). MIDP - дующего получения приложением, который называется Record Management System (RMS). , , . MIDP выделенную область памяти для постоянного хранения данных приложения. Дан-MID- , , - , . , . RMS API информацию об области хранения устройства и доступе к этой информации, а также предоставляет единообразный механизм для создания, уничтожения и измене. MID- . RMS . byte. RMS . - мат. Хранилище записей состоит из наборов записей, которые сохраняются между . при использовании устройства, его выключении, перезагрузке, смене батарей и т.д. MIDP , - мую конфигурацией CLDC. MIDP поддерживает подмножество протокола HTTP, который может быть реализован как поверх протоколов стека TCP/IP, так и поверх других протоколов, например WAP, с использованием шлюзов для доступа к HTTP- Internet. Объект соединения содержит входной и выходной потоки для считывания и записи данных для ресурса, соответственно. Существует четыре базовых катего-: • потоковые соединения, поддерживающие соединения с коммуникационными портами; • соединения уровня приложений со службами HTTP; • базовые соединения сокета стиля Unix; • , . Типовая двумерная игра состоит из фонового изображения и нескольких анимированных персонажей, и, хотя можно нарисовать подобную сцену самостоятельно, Game API предоставляет возможность по строения сцен при помощи уровней. Можно создать на одном уровне фон города, а на другом уровне - персонаж. Помещение уровня с персонажей поверх уровня с фоном формирует полную сце-. независимо от фона и от любых других уровней сцены. Загрузка и воспроизведение звуковых мелодий выполняется в зависимости от моделей телефона разного формата. В настоящее время телефоны поддерживают такие форматы как *.WAV, *.MIDI, *.OTT, *.MMF, *.MP3, *.ARM, и другие. . , -ными методами оптимизации. Опытный программист должен уметь определять участки в коде и находить подходящие приемы для оптимизации. Java- : - , , , , , -, , inline- , - , . Java- программ может быть выполнена за счет следующих приемов. Сокращение размера кода за счет сокращения длин имен классов, переменных и методов, уменьшения размера изображений, использования объектно, -, , . Ускорение выполнения кода за счет уменьшения числа новых объектов, уменьшения числа временных объектов (в том числе внутри циклов), сборки "мусора", использования статических методов. Время, затраченное на вызов метода, оценивается примерно по следующей схеме: static < final < instance < interface метод < synchronized метод. Увеличение скорости рисования объектов за счет использования двойной буферизации, если она поддерживается устройством, постоянной частоты кадров, хранение копии части карты в памяти. Использование многопоточного программирования. Уже достаточно давно для ускорения работы программ стали использовать многопоточное программирование. Сложные, длительные, ресурсоемкие вычисления выделяют в отдельный (Thread). , . адресное пространство у него общее со всеми потоками процесса. Одновременно процессор может выполнять только один поток. Однако, на переключение между потоками тратится меньше времени, чем на переключение между различными . . , 2D- 3D- , . 2D- - ры, работающие на разных моделях мобильных телефонов, могут иметь следую: • может работать только на данном устройстве или устройстве одной серии, имеющие одинаковые технические характеристики, например, размеры экраны, поддержка типы медиа-файлов, типы картинок, глубина цвета, модели, серия устройства, и т.д.; • Java- ; • ; • Персонажи главного героя, карт, окружающей среды и других объектов могут быть созданы с помощью спрайтов и PNG картинок; • ; • хорошее восприятие игры; ; • - хранения их изображений; • размера памяти не более 150Кб. Новое поколение игр ориентировано на аппараты с цветным графическим дисплеем и мощным процессором. В настоящее время наибольшее распространение имеют двумерные игры. Однако, продолжающееся совершенствование мобильных устройств дает возможность создания широкого класса трехмерных игр. Некоторые современные модели имеют такую поддержку трехмерной графики и можно надеяться, что вскоре 3D игры станут достаточно популярными. ]]></text>
</doc>
