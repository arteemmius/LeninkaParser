<doc>
  <source auto="true" type="str" verify="true"><![CDATA[https://cyberleninka.ru/article/n/razrabotka-metoda-avtomatizatsii-testirovaniya-sistem-s-interfeysom-programmirovaniya]]></source>
  <category auto="true" type="str" verify="true"><![CDATA[Автоматика]]></category>
  <author auto="true" type="list" verify="true">
    <item type="str"><![CDATA[Бирюков Сергей Вячеславович]]></item>
  </author>
  <title auto="true" type="str" verify="true"><![CDATA[Разработка метода автоматизации тестирования систем с интерфейсом программирования]]></title>
  <keywords auto="true" type="list" verify="true">
    <item type="str"><![CDATA[ИНТЕРФЕЙС ПРОГРАММИРОВАНИЯ]]></item>
    <item type="str"><![CDATA[АВТОМАТИЗАЦИЯ ТЕСТИРОВАНИЯ]]></item>
    <item type="str"><![CDATA[СПЕЦИФИКАЦИЯ ИНТЕРФЕЙСА]]></item>
    <item type="str"><![CDATA[УНИФИЦИРОВАННАЯ МОДЕЛЬ]]></item>
  </keywords>
  <annotation auto="true" type="str" verify="true"><![CDATA[В данной работе рассматриваются вопросы автоматизации тестирования на основе модели систем с интерфейсом программирования. Особое внимание уделяется вопросам автоматической генерации тестовых сценариев и построения тестовых оракулов. Приводится структура данных для хранения и обработки модели интерфейса с расширением для функциональных требований. Предложенный подход реализован в рамках программной среды генерации тестовых сценариев и оракулов APITest.]]></annotation>
  <text auto="true" type="str" verify="true"><![CDATA[В данной работе рассматриваются вопросы автоматизации тестирования на основе модели систем с интерфейсом программирования. Особое внимание уделяется вопросам автоматической генерации тестовых сценариев и построения тестовых оракулов. Приводится структура данных для хранения и обработки модели интерфейса с расширением для . среды генерации тестовых сценариев и оракулов APITest. Интерфейс программирования; автоматизация тестирования; спецификация ин-; . S.V. Biryukov THE DEVELOPMENT OF AUTOMATED TESTING METHOD FOR SYSTEMS WITH PROGRAMMING INTERFACE The issues of model-based automated testing for systems with programming interface are considered in this paper. Particular attention is paid to the automatic generation of test scenarios and building test oracles. The data structure for storage and processing of interface model with the expansion of functional requirements is offer. The proposed approach is implemented within the software environment for generating test scripts and oracles APITest. Programming interface; automated testing; interface specification; unified model. При разработке и сопровождении программных систем (ПС) значительная часть усилий тратится на поиск и устранение ошибок. Самым распространённым методом поиска ошибок является тестирование, т.е. процесс выполнения программ с целью обнаружения ошибок [1]. В настоящее время необходимость систематизированного тестирования в промышленной разработке ПС общепризнанна и неоспорима. Однако в большинстве случаев тестируемые ПС связывают с наличием в нем графического интерфейса пользователя, которое служит медиа- , , . , предоставляющий доступ к своей функциональности лишь посредством интерфейса программирования. Под интерфейсом программирования (Application Programming Interface, API) понимается набор методов (функций), предоставляющих доступ к некоторой функциональности системы на уровне кода, скрывая при этом особенности реали. API - ций (COM DLL, .NET assembly), web-сервисы, встроенные средства программирования приложений (VBA в MS Office). API , - тывать при автоматизации. Вокруг интерфейсных методов отсутствует графическая или иная оболочка, позволяющая осуществлять тестовые воздействия и получать результаты этих воздействий. Такую оболочку необходимо создавать отдель-, . Данные для обработки поступают в методы интерфейса посредством передачи их через один или несколько входных параметров. В качестве входных параметров могут использоваться как простые типы данных (целые или вещественные , , . .), , , -, . возможных значений слишком велико, чтобы проверить работу метода для каждого из них за разумное время. Необходимо выбрать небольшой набор перспективных в плане поиска дефектов значений для каждого из параметров, чтобы протес- тировать максимум функциональности метода. Кроме того, часть функциональности может зависеть не от каждого параметра в отдельности, а от их комбинации. Часто методы интерфейса оперируют данными сложного типа в качестве па. - . , -, . Причем промежуточный результат должен быть пригодным для успешного вызова последующего метода в последовательности. API , в себя автоматизацию основных этапов: ♦ Генерация тес товых сценариев. Каждый тестовый сценарий представляет собой последовательность вызовов интерфейсных методов. При этом должны быть определены реальные значения входных параметров. ♦ Выполнение тестовых сценариев. Использование интерфейса возможно лишь при наличии оболочки, с помощью которой возможно задавать тестовые воздействия и обрабатывать результаты работы. ♦ Анализ результатов работы методов. Может быть осуществлен путем сравнения с эталоном или использования тестовых оракулов - процедур, автоматически предсказывающих корректный результат работы методов. Входными данными для задачи тестирования интерфейса является спецификация интерфейса - формализованное описание элементов интерфейса, их пара, . отображает только ту часть информации, которая необходима стороннему приложению для использования интерфейса. Она представляет собой баланс между недостатком и избытком знаний об интерфейсе. Обзор показал, что не существует единого формата спецификации интерфейсов программирования. Наиболее рас-API, IDL (Interface Description Language) или диаграммы классов языка моделирования UML (Unified Model Language). В качестве спецификаций можно также использовать манифест динамической библиотеки. На рис. 1 представлен пример спецификации API UML. Спецификация является моделью интерфейса программирования. Моделирование программной системы в общем случае - это способ представления структуры и поведения системы. Модели проще, чем реальные системы, они помогают понять и предсказать поведение. В голове разработчика и тестировщика всегда присутствует та или иная «модель» устройства программы, а также «модель» ее , , , -веряемых свойств и создаются соответствующие тестовые сценарии [2]. Важной частью подхода при тестировании на основе моделей являются тестовые оракулы (oracles). В общем случае оракулом является процедура, описывающая способ определения корректности поведения целевой системы. Формальные или неформальные оракулы используются в любом подходе к тестированию, когда представление о корректном поведении системы сравнивается с полученным в ходе выполнения теста. Описание системы в виде формальной модели позволяет также формализовать оракулы. IBookShop +BookCount: Integer ICIient +LastOrder: IOrder < +Narre: String +MoneyAmount; Integer +OrderBook(BookTitle: String, Client: ICIient) +Add(Book: IBook) +FindBook(Title: String) Ї IOrder IBook +ClientNams: String +Book: IBook +Price; Integer +Title: String Рис. 1. Пример спецификации API в виде диаграммы классов UML , API структурной (архитектурной). В ней содержится мало информации о поведении системы, необходимо расширение модели знаниями о функциональности. Была раз- API расширением для хранения функциональных требований к интерфейсным функциям. Пример структуры для приведенного на рис. 1 интерфейса представлен на рис. 2. На начальном этапе осуществляется автоматический разбор спецификации конкретного вида и производится построение унифицированной модели. Предла-API вида [3]. В графе различаются вершины двух типов - объекты интерфейса и действия над ними (интерфейсные методы). Вершины первого типа соответствуют объектам, причем выделяются сложные и простые объекты. Простые объекты -это типы данных среды использования API (языка программирования). Сложные объекты задекларированы непосредственно в интерфейсе. Их создание и операции с ними осуществляются посредством интерфейсных методов. Вершины второго типа соответствуют действиям над объектами. Среди них также различаются два типа - свойства и функции. Свойства являются интерфейсом для получения или назначения некоторой характеристики объекта. Некоторые свойства доступны только для чтения данных, их модификация скрыта внутри . входных параметров и позволяют получить результат (возможно пустой) - потенциально полезные стороннему пользователю ЛР1-данные. Ориентированные ребра графа всегда соединяют вершину-объект и вершину. . , объект, выполняющий действие, а также объекты-ар^менты функций интерфейса. Рис. 2. Унифицированная модель АРІ На следующем этапе в модель добавляется дополнительная информация о параметрах интерфейсных функций и возможных значениях перезаписываемых . , , , . задекларированы внутри интерфейса, их можно получить обратным ходом по графу модели путем вызова цепочки интерфейсных методов родительских объектов. Для простых объектов можно определить домен значений, которые будут использоваться при генерации тестовых сценариев. В общем случае нам ничего не известно о том, как интерфейсный метод обрабатывает данные. В связи с этим тестовые сценарии должны строиться на основе стратегии «черного ящика». Наиболее перспективными кандидатами в такой домен выглядят значения, полученные при помощи методик разбиения по категориям и анализа граничных значений [4]. , образом значений повторяется независимо от семантики простого объекта. Например, для целых чисел «перспективными» в плане тестирования являются такие , , , -, , -ло. Эти значения могут быть заранее определены в шаблоне, а их добавление в домен тестовых значений объекта будет происходить автоматически. Если существуют «перспективные» значения, зависящие от семантики объекта, они должны быть добавлены тестировщиком вручную. В данном случае невозможно извлечь знания о поведении интерфейсного метода из его спецификации, таким знанием обладает тестировщик. Например, для функции определения числа на простоту в домен могут быть добавлены типичное (не граничное) простое число и типичное . формализации функциональных требований. Для представления функциональных требований используется известный подход на основе программных контрактов [5], состоящих из предусловий и постусловий интерфейсных методов и инвариантов типов данных. Основное его преимущество в том, что он позволяют автоматически построить оракулы и увеличить покрытие функциональности. Рассмотренный в статье подход к автоматизации тестирования систем с интерфейсом программирования реализован в рамках программной среды APITest. APITest позволяет работать со спецификациями во всех рассмотренных выше форматах, а также непосредственно с динамическими библиотеками DLL. Производится синтаксический анализ спецификации и автоматическое построение унифицированной модели, представленной на рис. 2. Диаграммы UML в своем графическом представлении неудобны для анализа и трансляции в другие языки и модели. Чтобы избавиться от этого ограничения, необходимо представить диаграмму в текстовом виде при помощи формата XMI (XML-based Metadata Interchange). APITest , объекты и операции. Для удобства и наглядности редактирование происходит с привязкой к модели интерфейса программирования. В зависимости от используемого шаблона осуществляется запись тестовых сценариев в виде последовательности вызовов интерфейсных методов на конкретном языке программирования. Полученный таким образом код может быть выполнен в одной из сред программирования с использованием средств автоматизации выполнения тестов, например библиотек семейства xUnit. Разработанная программная среда используется для проведения экспериментальных исследований для подтверждения работоспособности и эффективности . -сти и эффективности тестирования. Результаты экспериментов будут изложены в . ]]></text>
</doc>
