<doc>
  <source auto="true" type="str" verify="true"><![CDATA[https://cyberleninka.ru/article/n/podgotovka-dannyh-dlya-ispolzovaniya-v-obuchenii-i-testirovanii-neyrosetey-pri-obnaruzhenii-setevyh-atak]]></source>
  <category auto="true" type="str" verify="true"><![CDATA[Автоматика]]></category>
  <author auto="true" type="list" verify="true">
    <item type="str"><![CDATA[Абрамов Е.С.]]></item>
    <item type="str"><![CDATA[Аникеев М. В.]]></item>
    <item type="str"><![CDATA[Макаревич О. Б.]]></item>
  </author>
  <title auto="true" type="str" verify="true"><![CDATA[Подготовка данных для использования в обучении и тестировании нейросетей при обнаружении сетевых атак]]></title>
  <keywords auto="true" type="list" verify="true"/>
  <annotation auto="true" type="str" verify="true"><![CDATA[]]></annotation>
  <text auto="true" type="str" verify="true"><![CDATA[Большинство современных подходов к проблеме обнаружения вторжений [1] подразумевают использование анализа, основанного на жестких правилах. Такой анализ основан на наборах правил, которые либо заранее встраиваются в систему разработчиками, либо создаются самой системой или системным администратором в процессе эксплуатации. Наиболее традиционной формой систем обнаружения атак (СОА), основанных на правилах, считаются экспертные системы [6]. Экспертные системы успешно используют внесённые в них знания специалистов в области защиты информации для выявления сетевой активности с признаками злоупотреблений или атак. Однако экспертные системы требуют постоянных обновлений собственной базы знаний для возможности обнаружения новых классов атак. Системы, основанные на правилах, также испытывают существенные затруднения при обнаружении атак, распределённых во времени. Для нормального функционирования СОА должна получать входные данные непосредственно из потока сетевых данных. При этом могут использоваться два метода анализа трафика [2]. Первый метод заключается в следующем: захватывается Ethernet- кадр; начиная с первого байта производится сравнение с сигнатурой атаки; затем переходят к 2-у байту и так до конца кадра; при достижении конца кадра сравнение начинается сначала с новой сигнатурой и так до конца базы сигнатур. Во втором методе происходит разбор захваченного Ethernet-кадра для анализа типа протокола. СОА использует аппарат нейросетей для обнаружения атак, то данные заголовков дейтаграммы и пакета являются входными данными для нейросети. Поле данных протокола сравнивается с сигнатурами, присущими только этому протоколу. В отличие от экспертной системы, информирующей о признаках известных видов атак в вычислительной сети, нейронная сеть проводит анализ данных и пытается определить, насколько похожи признаки текущей сетевой активности на образцы атак из обучающей выборки. Поскольку нейронные сети обладают способностью к обобщению, можно предположить, что при достаточном объёме и представительности обучающей выборки нейронная сеть сможет экстраполировать свои знания об известных видах сетевых атак на неизвестные виды. Рассмотрим процесс формирования данных для СОА на основе нейронной сети. Для первого метода характерна более низкая производительность по сравнению со вторым методом, но он позволяет обнаруживать атаки на нестандартные сервисы, пропускаемые при использовании второго метода. Второй метод даёт значительный выигрыш в быстродействии за счёт анализа только определённых полей для выявления атак, специфичных для этого протокола, и дополнительный выигрыш за счёт отсутствия операции перебора сигнатур. Таким образом, достигается возможность анализа каждого поля данных всех протоколов стека TCP/IP и запас быстродействия при увеличении интенсивности трафика. Процесс подготовки данных для нейросети разбит на три этапа. На первом для представления сетевого события были выбраны десять элементов, как правило, представляющих в сети пакеты данных, а также представляющих полное описание данных в пакете [3,4,5]: - Protocol ID - протокол, связанный с событием (TCP = 0, UDP = 1, ICMP = 2 и Unknown = 3); - Исходный порт - номер порта источника; - Порт назначения - номер порта хоста назначения; - Исходный адрес - признак IP-адреса источника (0, если IP-адрес источника принадлежит интрасети и 1 в противоположном случае); - Адрес назначения - признак IP-адреса получателя (0, если IP-адрес получателя принадлежит интрасети и 1 в противоположном случае); - ICMP Type - тип ICMP пакета (Echo Request или Null); - ICMP Code - кодовое поле из ICMP пакета (None или Null); - Raw Data Length - длина данных в пакете; - IP флаги - поле флагов IP-дейтаграммы (сочетание флагов MF и DF как двухбитовое целое); - TCP флаги - шесть битовых параметров, соответствующих флагам TCP-пакета (SYN, ACK, PUSH, RESET, FIN и URG). На втором этапе производится конвертирование элементов в стандартизированное числовое представление. Также к описанию сетевого события добавляется одиннадцатый элемент - Атака (требуемый выход нейросети), принимающий положительное или отрицательное значение на основе определения, было ли это событие частью атаки в сети (табл.1). Этот элемент используется в процессе обучения в качестве выбранных выходных данных нейросети для каждой записи. Наиболее трудный компонент анализа сетевого трафика при помощи нейросети - это способность эффективно анализировать информацию в порциях данных 1Р-дейтаграммы. Различные команды, передающиеся в данных, часто представляют наиболее важный элемент в процессе определения того, имела ли место атака. На данном этапе исследований данные анализируются при помощи алгоритмов нечеткого поиска. Использование для анализа заголовков и данных пакетов аппарата нейросетей и алгоритмов нечёткого поиска позволет преодолеть недостаток, присущий выбранному методу анализа трафика и связанный с худшей способностью определять атаки на нестандартные сервисы и позволит определять новые, ранее неизвестные атаки, не включённые в базу сигнатур. Таблица 1 Пример описаний предварительно обработанных событий Protocol ID Src. Port Dest. Port Source Addr Dest. Addr. ICMP Type ID ICMP Code ID Raw Data IP flags TCP flags 0 2314 80 0 0 0 0 401 0 0 1 1 0 0 0 0 0 0 0 1 0 10 0 0 1 0 0 0 0 0 0 0 На третьем этапе предварительной обработки описания преобразовывались в формат, который может быть использован нейросетью. Это так называемый ASCII comma-delimited формат (табл. 2). Таблица 2 Пример ASCII comma-delimited входных строк (последовательностей) 0; 2314; 80; 0; 0; 0; 0; 401; 0; 0; 1; 1; 0; 0; 0; 0 0; 0; 0; 1; 0; 10; 0; 0; 1; 0; 0; 0; 0; 0; 0; 0 В итоге получился набор данных для загрузки в нейросеть при обучении и тестировании СОА (табл. 3). Таблица 3 Пример входных данных для нейросети Input 1 Input 2 Input 3 Input 4 Input 5 Input 6 In- put 7 Input 8 Input 910 Input 11-16 4.2.1. utput 1 0 2314 80 0 0 0 0 401 0 0 0 1 1 0 0 0 0 0 0 0 1 0 10 0 0 1 0 1 0 0 0 0 0 1 ]]></text>
</doc>
