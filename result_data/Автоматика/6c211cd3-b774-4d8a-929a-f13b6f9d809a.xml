<doc>
  <source auto="true" type="str" verify="true"><![CDATA[https://cyberleninka.ru/article/n/proektirovanie-bezopasnyh-mnogoprotsessornyh-sistem]]></source>
  <category auto="true" type="str" verify="true"><![CDATA[Автоматика]]></category>
  <author auto="true" type="list" verify="true">
    <item type="str"><![CDATA[Бабенко Л.К.]]></item>
    <item type="str"><![CDATA[Макаревич О.Б.]]></item>
    <item type="str"><![CDATA[Лим Д.Э.]]></item>
  </author>
  <title auto="true" type="str" verify="true"><![CDATA[Проектирование безопасных многопроцессорных систем]]></title>
  <keywords auto="true" type="list" verify="true"/>
  <annotation auto="true" type="str" verify="true"><![CDATA[]]></annotation>
  <text auto="true" type="str" verify="true"><![CDATA[В данной работе рассматривается задача проектирования безопасных много. В соответствии с одной из современных классификаций [1] все системы с MIMD-архитектурой можно классифицировать по структуре памяти и методам синхронизации между процессорами. В зависимости от структуры оперативной памяти существуют: 1) системы с общей памятью, адресуемой всеми процессорами; 2) системы с распределенной памятью, каждая часть которой доступна только одному процессору. Межпроцессорные взаимодействия строятся через разделяемые переменные или с помощью механизма передачи сообщений. При этом могут существовать следующие виды архитектур: 1) общая память - разделяемые переменные (GMSV); 2) распределенная память - разделяемые переменные (DMSV); 3) распределенная память - передача сообщений (DMMP); 4) общая память - передача сообщений (GMMP). , межпроцессорного взаимодействия и синхронизации, называются системами с разделяемой памятью, например, CRAY Y-MP [2] (класс 1). Системы с распределенной памятью и синхронизацией через разделяемые переменные, как в BBN Butterfly, называются гибридными архитектурами (класс 2). Системы, в которых память распределена по процессорам, а для взаимодействия и синхронизации используется механизм передачи сообщений, называются архитектурами с передачей сообщений, например: NCube, ЕС2703[3] (класс 3). Данный класс МВС является наиболее перспективным в настоящее время. При проектировании многопроцессорных систем наиболее значимыми с точки зрения обеспечения безопасности являются два направления: 1) -; 2) . Другие угрозы для обрабатываемых данных либо значительно менее сущест-, . Поддержание логической целостности данных в МВС осуществляется как на , . -ство структур данных, требующих защиты. Решение данной задачи осуществляет- ся, в первую очередь, путем корректной разработки системного и прикладного программного обеспечения. Соответствующие средства могут использовать формальные, программнореализованные методы распознавания тупиков. Примером таких средств могут быть: ♦ сем афоры; ♦ методы, основанные на ведении таблиц распределения ресурсов и таблиц запросов к занятым ресурсам. Анализ этих таблиц позволяет обнаружить взаимные блокировки; ♦ мониторы (высокоуровневое средство синхронизации). - , , имеет собственную оперативную память (класс 3), семафоры и мониторы оказы-. только с помощью обмена сообщениями. Для защиты данных от случайных повреждений используются корректирую. В распределенных системах схема контроля целостности данных подразумевает выполнение двумя сторонами - источником и приемником — некоторых (возможно, разных) криптографических преобразований данных. Источник преобразует исходные данные и передает их приемнику вместе с некоторым приложением, обеспечивающим избыточность шифрограммы. Приемник обрабатывает полу, -имное соответствие, осуществляя таким образом контроль целостности. Конкретное криптографическое преобразование является частью общего протокола взаи-. обеспечиваться различными сочетаниями основных механизмов - цифровой подписи (например, ГОСТР 34.10-94, ГОСТР 33.11-94 и имитовставки (например, по ГОСТ 28147-87). В связи с тем, что многопроцессорная система является сосредоточенным , - . Защита от несанкционированного доступа к данным представляет собой , функциями вычислительной системы. Как известно, удобство пользования вычислительной системой обратно пропорционально степени ее защищенности. Основной задачей контроля и управления доступом является установление , . -вует два основных механизма управления доступом — дискреционный (произ-) ( ). Проювольное управление доступом Произвольное управление доступом в соответствии с требованиями «Оранжевой Книги» появляется начиная с класса С. Основой произвольного управления доступом является матрица прав доступа, строки которой соответствуют субъектам (пользователи, процессы и т.д.), а столбцы объектам (файлы, каталоги, процессы и т.д.). В ячейках матрицы содержатся права доступа субъектов к объектам. В качестве субъектов в МВС могут выступать пользователи, между которыми ( ). работе не первом этапе рассматривается статическое распределение ресурсов РП. С другой стороны, процессы, развивающиеся в РП, выступают как субъекты при обращении к параллельной системе баз данных. В зависимости от способа представления матрицы прав доступа в ОС различают несколько способов реализации произвольного контроля доступа. Наиболее распространёнными для операционных систем являются: 1. списки прав доступа (Access Control List — ACL); 2. . Списки прав доступа При произвольном управлении доступом с помощью ACL с каждым объектом ассоциируется список пользователей, в котором указаны их права доступа к . ACL проверяется на наличие прав, ассоциированных с идентификатором пользователя, , , системе баз данных. Биты защиты , UNIX, они реализуют произвольный доступ с помощью механизма битов защиты. При этом вместо списка пользователей, которым разрешён доступ к объекту, с . UNIX доступа субъектов по чтению, записи и выполнению. При этом биты защиты может изменять только владелец задачи и администратор. , , -зовать комбинации списков контроля доступа и битов защиты. Нормативное управление доступом В отличие от произвольного управления доступом, которое позволяет передавать права одного пользователя другому, нормативное управление доступом полностью запрещает передачу прав доступа между пользователями. Это позволяет разрешить проблему «троянских коней» в защищённых информационных системах. Нормативное управление доступом, основанное на модели Белла-Лападула и известное как правила «запрета чтения с верхнего уровня» и «записи на нижний уровень», может быть перенесено в МВС с соответствующими модификациями, учитывающими архитектурные особенности системы. Если MIMD-MBC относится к классам 3 и 4, т.е. процессы взаимодействуют (DMMP, GMMP), - нентами МВС построены на основе модели клиент/сервер, то задачи по обеспечению безопасности решаются службой безопасности на уровне ОС. Наиболее перспективной с этой точки зрения является технология реализации ОС, получившая известность как микроядерная [2], [3]. Все компоненты системы используют средства микроядра для обмена сообщениями, но взаимодействуют непосредственно. Микроядро лишь проверяет за- , . В результате такие важные компоненты ОС, как файло вая система, сетевая . ., - , функционируют как отдельные процессы и взаимодействуют с ядром и друг с другом на общих основаниях. Этот подход построения операционных систем использовался и в авторской разработке отечественной МВС ЕС2703 [4]. Структура и организация данной МВС позволяет функционировать в вычислительной среде множеству параллельных процессов различных типов. Организация ОС МВС выполнена по принципу разделения основных функций и реализации их на собственных процессорах. Ядро ОС осуществляет инициализацию среды , , -нение в соответствии с масштабом реального времени, загрузку задач и управление их прохождением по ВС, а также обеспечивает взаимодействие с файловой системой для формирования связей задач с файлами данных с учетом координации коммутирующих программ через процессор обмена. Основными преимуществами ОС, реализованной на собственных процессорах, являются: ♦ повышение ее производительности; ♦ отсутствие аппарата ключей защиты, так как выполнение системных программ и программ пользователя производится на независимых процессорах с локальной памятью; ♦ управление режимом мультипроцессной обработки на РП, осуществляемое ядром ОС, аппаратно разделенным с РП, что дает возможность освободить макропроцессоры от системной составляющей, и приведет к довольно простой структуре ОС. ]]></text>
</doc>
