<doc>
  <source auto="true" type="str" verify="true"><![CDATA[https://cyberleninka.ru/article/n/optimizatsiya-zaprosov-k-kadastrovoy-baze-dannyh]]></source>
  <category auto="true" type="str" verify="true"><![CDATA[Автоматика]]></category>
  <author auto="true" type="list" verify="true">
    <item type="str"><![CDATA[Беляков С.Л.]]></item>
    <item type="str"><![CDATA[Диденко Д.А.]]></item>
  </author>
  <title auto="true" type="str" verify="true"><![CDATA[Оптимизация запросов к кадастровой базе данных]]></title>
  <keywords auto="true" type="list" verify="true">
    <item type="str"><![CDATA[БАЗА ДАННЫХ]]></item>
    <item type="str"><![CDATA[СУБД]]></item>
    <item type="str"><![CDATA[SQL-ЗАПРОС]]></item>
    <item type="str"><![CDATA[ОПТИМИЗАЦИЯ ЗАПРОСОВ]]></item>
    <item type="str"><![CDATA[ПРОГРАММНЫЙ КОД]]></item>
    <item type="str"><![CDATA[СТАТИСТИЧЕСКИЕ ИССЛЕДОВАНИЯ]]></item>
    <item type="str"><![CDATA[БАЗА ДАННЫХ ПО УЧЕТУ ДОГОВОРОВ ДОБРОВОЛЬНОГО СТРАХОВАНИЯ АВТОТРАНСПОРТА]]></item>
    <item type="str"><![CDATA[ВЛОЖЕННЫЕ ЗАПРОСЫ]]></item>
    <item type="str"><![CDATA[СТОИМОСТЬ ВЫПОЛНЕНИЯ ЗАПРОСА]]></item>
    <item type="str"><![CDATA[DATABASE MANAGEMENT SYSTEM (DBMS)]]></item>
  </keywords>
  <annotation auto="true" type="str" verify="true"><![CDATA[Цель данной статьи анализ оптимальных путей выполнения клиентских запросов. При анализе и перестройке SQL-запросов снижается время их выполнения в десятки, даже в сотни раз. Важность исследования компонента оптимизации определяется тем, что от его развитости критически зависит общая производительность любой SQL-ориентированной СУБД.]]></annotation>
  <text auto="true" type="str" verify="true"><![CDATA[В настоящее время существует множество вопросов, связанных с оптимизацией выполнения запросов в системах управления базами данных (СУБД). Обычно, говоря про оптимизацию в СУБД, имеем в виду аспект оптимизации запросов, то есть такой способ выполнения запроса, когда по его начальному представлению путем синтаксических и семантических преобразований вырабатывается процедурный план выполнения запроса, наиболее оптимальный при существующих в базе данных управляющих структурах. Экономический принцип требует, чтобы процедуры оптимизации пытались либо максимизировать пропускную способность при заданном числе ресурсов, либо минимизировать потребление ресурсов при данной пропускной способности. Оптимизация запросов направлена на минимизацию времени отклика для заданного запроса и смеси типов запросов в данной системной среде. Эта общая цель допускает ряд различных операционных целевых функций. Время отклика является разумной целью только при предположении, что время пользователя является наиболее важным критическим ресурсом. В противном случае можно стремиться к непосредственной минимизации стоимости потребления технических ресурсов. Обе цели являются в большой степени взаимно дополнительными; при этом возникающие конфликты целей обычно разрешаются путем назначения ограничений на доступные технические ресурсы (например, на размер буферного пространства в основной памяти) [1]. Практически каждый разработчик может создавать 8рЬ-запросы, но возможностью создавать максимально оптимизированные запросы, которые отличают действительно быстро работающее приложение от его собрата, показывающего приемлемую производительность, обладает далеко не каждый [2]. Целью данной статьи является анализ наиболее оптимальных путей выполнения клиентских запросов. Анализируя и перестраивая 8рЬ-запросы, можно снизить время их выполнения в десятки, а иногда и в сотни раз. Итак, после того, как создана структура базы данных, можно проектировать запросы, при помощи кото- рых клиентские приложения будут манипулировать данными на сервере, осуществляя операции выборки, вставки, изменения и удаления данных. В базе данных по учету договоров добровольного страхования автотранспорта содержатся следующие запросы, программные коды которых представлены ниже. Каждый из запросов выполнен в двух вариантах для дальнейшего проведения статистических исследований. Общая задача первого запроса такова: найти все договора страхования, заключенные на легковые автомобили (по типу ТС), с типом двигателя «дизельный». Программный код первого варианта таков: SELECT * FROM Договорстрахования where ID dogovora straxovania in (select ID komplektacii TS from комплектация тс where (Tip dvigatelia='дизельный' and ID komplektacii TS in (select ID svedenij o TS from сведе-нияотс where Tip TS='Легковые'))) Программный код второго варианта таков: SELECT * FROM Договорстрахования where ID dogovora straxovania in (select ID komplektacii TS from комплектация тс where (Tip dvigatelia='дизельный' and ID komplektacii TS in (SELECT ID dogovora straxovania FROM Договорстрахования where ID dogovora straxovania in (select ID svedenij o TS from сведенияотс where Tip TS='Легковые')))) Общая идея следующего запроса такова: выделить договора только со страховым случаем. Программный код первого варианта таков: SELECT * FROM Договорстрахования where Straxo- voj slychiaj=True Программный код второго варианта следующий: SELECT * FROM Договорстрахования where ID dogovora straxovania in (select ID dogovora straxovania from Договорстрахования where ID dogovora straxovania in (select ID dogovora straxovania from Договорстрахования where Straxovoj slychiaj=True)) Смысл следующего запроса следующий: найти страхователя (физическое лицо) по фамилии, имени, отчеству. Текст программы таков: If IsNull([фа]) Then query1 = "([ID straxovatelia]=[ID straxovatelia])" Else query1 = "(Familia LIKE '" & [фа] & "')" End If If IsNull([им]) Then query2 = "([ID straxovatelia]=[ID straxovatelia])" Else query2 = "(Imia LIKE '" & [им] & "')" End If If IsNul^^^) Then query3 = "([ID straxovatelia]=[ID straxovatelia])" Else query3 = "(Otchestvo LIKE '" & [от] & "')" End If superquery = "SELECT * FROM Страхователь WHERE (" & query1 & " AND " & query2 & " AND " & query3 & ")" Программный код второго варианта выполнения запроса следующий: SELECT * FROM Страхователь WHERE Familia like '" & [фа] & "' and Imia in (Select Imia from страхователь where otchestvo like '" & [от] & "') Также можно найти и юридическое лицо по наименованию предприятия. Программный код первого варианта таков: SELECT * FROM Страхователь WHERE (" & query1 & ") Программный код второго варианта следующий: SELECT * FROM Страхователь WHERE ID_strahovatelia in (Select ID_ID_strahovatelia from страхователь where Nai-menovanie predpriatia like '" & [наи] & "') Смысл следующего запроса таков: найти все ТС по марке и государственному регистрационному знаку. Программный код первого варианта: SELECT * FROM СведенияоТС WHERE (" & query1 & " AND " & query2 & ") Программный код второго варианта таков: SELECT * FROM СведенияоТС WHERE (Gosydarstven-nij registracionnij znak LIKE '" & [го] & "' and ID svedenij o TS in (select ID svedenij o TS from сведения-отс where Marka_TS LIKE '" & [ма] & "')) Смысл следующего запроса состоит в том, чтобы найти все ТС по типу цели использования с заданным режимом хранения в период с 00:00 до 06:00. Программный код первого варианта таков: SELECT*FROMСведенияоТСWHERE(СведенияоТС.Tip celi ispol zovania='служебная'ANDСведенияоТС.Rejim xranenia TS v perio ds00 00 do 06 00='гараж') Программный код второго варианта выполнения этого запроса: SELECT * FROM СведенияоТС WHERE (Сведения-оТС.Tip celi ispolzovania='служебная' AND ID svedenij o TS in (select ID svedenij o TS from Сведенияотс whereСведенияоТС.Rejim xranenia TS v period s 00 00 do 06 00='гараж')) Исследованиям подверглись две базы данных: первая на 444 500 записей, а вторая на 949 540 записей, в которые были внедрены запросы, описанные выше. Для более наглядного представления все результаты работы занесены в таблицы, отражающие основные показатели диспетчера задач Windows. К таким основным показателям относятся: загрузка ЦП, физическая память, время выполнения запроса, а также загрузка сети. В случае с реляционными базами данных учитывалась стоимость доступа к вторичной памяти (обычно измеряемая числом обращения к страницам) и стоимость использования ЦП (часто измеряемая числом сравнений, которые требуется произвести). Также следует отметить важность хорошей аппаратуры, влияющей на работу системы. В табл. 1, 2 отражены результаты статистических исследований с параметрами из диспетчера задач, где N - количество выполнения варианта каждого запроса, V - номер запроса (всего их шесть), «цифра» - варианты выполнения одного запроса. Здесь заданы вычисления следующих статистических характеристик: • минимума (Min); • максимума (Max); • среднего значения (Mean); • стандартного отклонения (Std. Deviation); • вариации (Variance). Таблица l Дескриптивные статистики. Загрузка ЦП N Min Max Mean Std. Deviation Variance V1 1Q 67,QQ 6S,QQ б7,8 Q,4216 Q,17S V2 1Q 54,QQ 56,QQ 55,7 Q,6749 Q,456 VV1 1Q 62,QQ 64,QQ б3,2 Q,6325 Q,4QQ VV2 1Q 64,QQ 65,QQ б4,9 Q,3162 Q,1QQ VVV1 1Q 5S,QQ 5S,QQ 5S,9 Q,7379 Q,544 VVV2 1Q 55,QQ 5S,QQ 5б,8 Q,4216 Q,17S VVVV1 1Q 66,QQ 6,QQ б7,1 Q,3162 Q,1QQ VVVV2 1Q 5S,QQ 57,QQ 5S,9 Q,3162 Q,1QQ VVVVV1 1Q 57,QQ 5S,QQ 57,9 Q,3162 Q,1QQ VVVVV2 1Q 55,QQ 5S,QQ 58,б 1,2б49 1,6QQ VVVVVV1 1Q 56,QQ 56,QQ 56,Q Q,QQQQ Q,QQQ VVVVVV2 1Q 54,QQ 59,QQ 57,9 1,4491 2,1QQ Таблица 2 Дескриптивные статистики. Загрузка сети N Min Max Mean Std. Deviation Variance V1 1Q 71,Q 73,Q 72 ,Q Q,4714 Q,222 V2 1Q 71,Q 76,Q 72,5 1,S4Q9 3,3S9 VV1 1Q 73,Q 76,Q 75,4 1,3499 1,S22 VV2 1Q 73,Q 7S,Q 7б,7 Q,94S7 Q,9QQ VVV1 1Q 74,Q 77,Q 7б,4 1,2б49 1,6QQ VVV2 1Q 7Q,Q 71,Q 7Q,2 3,4S97 12,17S VVVV1 1Q 74,Q 79,Q 77,S 2,Q976 4,4QQ VVVV2 1Q 74,Q 76,Q 75,S Q,6325 Q,4QQ VVVVV1 1Q 75,Q 76,Q 75,7 Q,4S3Q Q,233 VVVVV2 1Q 74,Q 76,Q 74,7 1,Q593 1,122 VVVVVV1 1Q 71,Q 76,Q 73,3 Q,94S7 Q,9QQ VVVVVV2 1Q 71,Q 7S,Q 73,7 2,54QS б,45б Сравнение производилось по всем параметрам табл. 1 и 2. Так, из двух вариантов запроса № 1 (найти все договора страхования, заключенные на легковые автомобили (по типу ТС), с типом двигателя - дизельный) наиболее эффективным является первый вариант, это видно по показателям. У запроса № 2 (выделить договора только со страховым случаем) наиболее эффективным является также первый вариант. Второй вариант является эффективнее у запроса № 3 (найти страхователя (физическое лицо) по фамилии, имени, отчеству). Второй вариант также является эффективнее у запроса № 4 (найти юр. лицо (вариант 1)). У запроса № 5 (найти все ТС по марке и государственному регистрационному знаку) наиболее эффективный вариант - второй. У запроса № 6 (найти все ТС по типу цели использования с заданным режимом хранения в период с 00:00 до 06:00) наиболее эффективен первый вариант. Таким образом, была произведена оптимизация запросов к кадастровой базе данных по учету договоров добровольного страхования автотранспорта, а также выявлены наиболее оптимальные запросы для работы с этой системой. Следует отметить, что вложенные запросы работают менее эффективно, и на их выполнение затрачивается большее количество времени; вдобавок, нагрузка на ресурсы ЭВМ увеличивается, что может привести к нежелательным последствиям, вплоть до отключения системы. Наиболее эффективны запросы, разбитые на несколько простых запросов. А также запросы, для реализации которых использо- ваны поля логического типа и идентификационные номера (счетчики). Очень важным условием быстрого выполнения запроса является наличие мощной ЭВМ с хорошим программным обеспечением. Если запрос выполняется по сети через другой компьютер, то следует учитывать загруженность сети. Оптимизация запросов является наиболее важным и интересным направлением исследований и разработок во всей области баз данных. Важность этого направления определяется тем, что от развитости компонента оптимизации запросов критически зависит общая производительность любой 8рЬ-ориентированной СУБД. Это направление наиболее интересно, потому что при решении задач оптимизации приходится использовать самые разнообразные подходы и методы из различных областей вычислительной науки и математики: методы оптимизации программ, применяемые в компиляторах языков программирования, математическую логику, математическую статистику, методы искусственного интеллекта, распознавания образов [7]. ]]></text>
</doc>
