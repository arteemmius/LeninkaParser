<doc>
  <source auto="true" type="str" verify="true"><![CDATA[https://cyberleninka.ru/article/n/mnogokriterialnaya-optimizatsiya-standartnyh-kmop-shem-v-submikronnyh-tehnologiyah]]></source>
  <category auto="true" type="str" verify="true"><![CDATA[Автоматика]]></category>
  <author auto="true" type="list" verify="true">
    <item type="str"><![CDATA[Мелик-Адамян Арег Фрикович]]></item>
  </author>
  <title auto="true" type="str" verify="true"><![CDATA[Многокритериальная оптимизация стандартных КМОП-схем в субмикронных технологиях]]></title>
  <keywords auto="true" type="list" verify="true">
    <item type="str"><![CDATA[САПР МИКРОЭЛЕКТРОНИКИ]]></item>
    <item type="str"><![CDATA[ГЕНЕТИЧЕСКИЕ АЛГОРИТМЫ]]></item>
    <item type="str"><![CDATA[МНОГОКРИТЕРИАЛЬНАЯ ОПТИМИЗАЦИЯ]]></item>
  </keywords>
  <annotation auto="true" type="str" verify="true"><![CDATA[С уменьшением физических размеров транзисторов, адаптация стандартных ячеек и небольших схем в маршруте проектирования СБИС на этапе физического проектирования, является одной из актуальных задач в САПР микроэлектроники. Часто достижение тех или иных характеристик СБИС легче произвести адаптацией библиотек ячеек, нежели перепроектированием СБИС. В статье предложен метод многокритериальной оптимизации стандартных ячеек, годный для использования в существующих маршрутах проектирования. Экспериментальные результаты показывают улучшение характеристик энергопотребления и оптимизации площади до 15 %.]]></annotation>
  <text auto="true" type="str" verify="true"><![CDATA[С уменьшением физических размеров транзисторов, адаптация стандартных ячеек и небольших схем в маршруте проектирования СБИС на этапе физического проектирования, является одной из актуальных задач в САПР микроэлектроники. Часто достижение тех или иных характеристик СБИС легче произвести адаптацией библиотек ячеек, нежели перепроектированием СБИС. В статье предложен метод многокритериальной оптимиза- ции стандартных ячеек, годный для использования в существующих маршрутах проектирования. Экспериментальные результаты показывают улучшение характеристик энергопотребления и оптимизации площади до 15 %. САПР микроэлектроники; генетические алгоритмы; многокритериальная оптимизация. A.F. Melik-Adamyan MULTIOBJECTIVE OPTIMIZATION OF STANDARD CELLS FOR CMOS NANO-SCALE VLSI DESIGNS With shrinking CMOS technology, the accurate trade-off between delay, static power consumption and yield of a digital circuit is becoming the most important factor while designing a functionally reliable and low power circuit. Gate sizing has emerged as one of the efficient way to achieve the goal in post-layout step of design flow. In the past single-objective optimization techniques have been used to optimize the timing variation, power or yield whereas on the other hand multi-objective optimization techniques can provide a more promising approach to design the circuit. We propose an algorithm based on multi-objective optimization technique called Nondominated Sorting Genetic Algorithm. Algorithm overcomes the disadvantages of traditional optimization techniques. Electronic design automation; genetic algorithm; multiobjective optimization. Введение. Продолжающейся развитие технологии производства полупроводниковой продукции, с технологической точки зрения, связано в первую очередь с уменьшением физических размеров транзисторов и уменьшением порогового напряжения. Эти факторы позволяют интегрировать на одной подложке несколько сот миллионов транзисторов. С уменьшением геометрических размеров транзисторов снижается площадь кристалла, уменьшаются паразитные ёмкости, улучшается быстродействие и снижается энергопотребление СБИС. За последние 30 лет длина затвора МОП-транзистора уменьшилась в 250 раз (с 10 мкм в начале 70-х годов до 40 нм в наши дни). Однако такое уменьшение повлекло за собой появление новых проблем, которые не были важными в старых технологиях. Например, статическое энергопотребление, связанное с подпороговыми токами утечек. Начиная с технологии 90 нм и ниже, на подпороговые утечки приходиться до 50% от общего объема электропотребления для приложений, работающих на мобильных устройствах [1,2]. Другой, не менее важной проблемой является обеспечение уровня выхода годных (yield), повлекшее за собой создание новой дисциплины проектирования топологии с учетом технологических процессов (Design for Manufacturing) [9,10,12]. Одним из основных методов, отличающихся простотой, которую можно использовать в обоих случаях, является варьирование длин транзисторов. В работах [10-12] рассматриваются разные варианты этого метода для задач минимизации площади, энергопотребления и т.д. В основном, этот метод рассматривается при решении задач минимизации задержек при ограничениях на площадь. Оптимизация уровня выхода годных тоже в основном ставится в этих терминах [6,5]. Но большинство работ концентрируются на поиске компромисса (trade-off) между площадью и задержками. Однако в настоящее время энергопотребление или уровень выхода годных играют не меньшую роль в поисках компромиссов. Традиционная схема оптимизации выглядит следующим образом: f(x) ^ min при (1) g(x) < gmax h(x) < hmax, где gmax, Ьтах - ограничения. Оптимизационная задача с использованием только одного критерия (1), имеет несколько недостатков. Первое и самое главное: решение однокритериальной задачи оптимизации будет зависеть от ограничений, накладываемых на другие параметры, которые определяются инженером. Таким образом, если эти ограничения были выбраны неверно, то решение не будет иметь смысла или не даст максимального результата. Например, если мы определили штрафные очки при увеличении g(x) и к(х), и, если границы вариации целевых функций очень узкие, то оптимизация использует штрафные очки по максимуму. И может быть существуют другие решения, с меньшими значениями ограничений, которые мы не получим. Второе, большинство используемых техник оптимизаций в промышленных САПР, основываются на традиционных однокритериальных методах оптимизации. При наличии нескольких критериев, они оптимизируют сначала по одному критерию, а потом по второму и т.д. Результат такой «последовательной» оптимизации существенно зависит от выбора порядка критериев, по которым идет оптимизация. При этом теряется сам смысл многокритериальной оптимизации, когда идет одновременная оптимизация по нескольким критериям. И третье, при использовании многокритериальной оптимизации, при отсутствии решения мы можем получить близкое к оптимальному решение, что с инженерной точки зрения может быть приемлемым. Традиционные техники в таких случаях не дадут результата. Таким образом, необходим метод который: ♦ одновременно оптимизирует по нескольким критериям; ♦ максимально не требует вмешательства пользователя; ♦ даст решения, близкие к оптимальным, при отсутствии точного решения. Применение генетических алгоритмов для задач САПР рассмотрены в [1-4]. В данной статье рассматривается техника многокритериальной оптимизации на основе комбинации ЛП-поиска [14] и оптимизации на основе генетического алгоритма недоминирующего упорядочивания [27-29]. Этот алгоритм пытается минимизировать все критерии одновременно. Алгоритм находит все Парето-оптимальные решения, если они существуют, или даст точки которые лучше исходных, но не попадают в множество оптимальных решений. Такой метод дает инженерам-проектировщикам гибкость при оптимизации и выборе компромиссов между решениями. Базовая модель размерной оптимизации. Традиционная схема размерной оптимизации может быть представлена следующим образом [7]: дано (О, О), найти Ь; тт а2 (ф; при ^.($) — ^тах п(О) — птах , (2) где О - множество всех транзисторов и gi £ О - О множество выходов ячейки, О с О; Ь = {/ь 12, . . . , /„}, где / - длина транзистора gi; ^(х) - математическое ожидание; о2 (х) дисперсия случайной величины х; di - задержка /'-того выхода ячейки, / £ О; п(О) - площадь ячейки содержащее все транзисторы из О; птах и (мтах -максимальное допустимые площадь и математическое ожидание задержек выходов ячейки. Таким образом, алгоритм решения задачи (2) должен решить нелинейную оптимизационную задачу и предоставить инженеру-проектировщику единственный вектор Ь. Ограничения определяют верхнюю грань для штрафных значений при оптимизации целевой функции, которая выступает в виде издержек на площадь и задержку. Общая схема процесса оптимизации. При использовании оптимизации в стандартном маршруте проектирования, необходимо состыковать оптимизатор с SPICE программой для точной оценки результатов. Общая схема оптимизации представлена на рис. 1. Рис. 1. Схема оптимизации в маршруте проектирования Постановка нашей задачи для оптимизации при двух критериях и предоставлении нескольких близких к оптимальным, при отсутствии Парето-оптимальных решений выглядит следующим образом: найти L; min max( а /у); min n(G); min P(G); при Ij mm < Ij < Ijmax . (З) Модель задержек соответствует модели, представленной в [23] вычисляемой с помощью метода 8ТЛ. А модель утечки Р представлена далее. Модель тока утечки. Большинство аналитических работ по моделированию подпороговых токов утечки используют модель Б8ІМ4 [13], Isub = А ■ exP VGS - VT - YVSB + nVD, nVTH - VDS 1 - exp--------— Vth (4) где УОБ, УТ, УББ, УОБ, УТИ - напряжения, соответственно, определяющие затвор-исток, пороговое, исток-подложка, сток-исток, и термальное УТИ = кТ / д , п - под-пороговый коэффициент качения, у' - линейный коэффициент подложки, Ц - коэффициент стоко-вызванный утечки через барьер (БГБЬ), и W 2 I - V A = HCox-rVm expI -V-L \VVth (5) где /Ло - коэффициент смещения нулевого напряжения, СОХ — емкость окисла затвора, W — у9гс9уО, а Ь — длина транзистора. Для определения тока утечки для ячейки, надо решить уравнение (1) для всех транзисторов, входящих в ячейку. Как мы видим, ток утечки, экспоненциально зависит от порогового напряжения, УТ, температуры и коэффициентов у' и ц. Рассмотрим следующие ограничения: ♦ УОБ = 0, нас будет интересовать только выключенное состояние транзистора; ♦ УББ = УББ = УББ - рассмотрим только один транзистор, без эффекта стекирования и взаимодействия нескольких транзисторов. Как показано в [14], в таком случае, уравнение (1) принимает вид: 1.8 е I = I • We sub 0 l '■ (6) а для Ут, принимая во внимание ограничения и уравнения для порогового напряжения [14], мы будем использовать следующее приближение: V' = V + V T У т ' v DD — (L + c1L2) + C3 (7) где cl, c2 и c3 - корректирующие параметры. Минус перед множителем VDD отражает тот факт, что транзистор с более короткой длиной канала имеет больший ток утечки. Полный ток утечки для ячейки получается простым суммированием значений для всех транзисторов: 1 total =aZ Isub , (8) где а - коэффициент определяемый экспериментальным путем, отражающий сте-кирование и соотношение размеров транзисторов. Это уравнение может быть использовано для всех типов транзисторов. Эксперименты по уточнению (рис. 2) модели и определении точности были проведены для коммерческой библиотеки 130 нм, для варианта с скоростными ячейками. Эксперименты были проведены на компьютере с процессором Core2 Duo 7300, с оперативной памятью 2 ГБ, под управлением ОС Linux. Все программы написаны на языке C++. Были проверены 231 ячейка с использованием модели (3) и коммерческого симулятора Synopsys HSIM. Было организовано 10000 прогонов симулятора. Рис. 2. Отклонение эмпирической модели от ББ1М4 (в %) В среднем программа для решения задачи (3) работает в 500 раз быстрее, чем симулятор ЫБГМ, что позволяет его использовать для получения оценок с достаточной точностью для использования в схеме оптимизации. Модель площади. Модель площади формируется простым суммированием площадей транзисторов умноженным на весовой коэффициент. п wa, c 2 d где U - длина /'-го транзистора, / £ G; w/ - ширина /-го транзистора, / £ G; ai - весовой /-го транзистора, / £ G, определяется его участием в трассировке и показывает, насколько изменение /-го транзистора влияет на общую площадь. Более детально о вычислении а/ можно узнать из работ [15,19,20]. Генетический алгоритм. Как видно из уравнений в разделах II-V и задачи (3) ставится задача нелинейной многокритериальной оптимизации. Это делает затруднительной применение традиционных схем оптимизации. В работах [27-29] показано, как применение генетических алгоритмов помогает в решении многокритериальных задач в САПР. Далее мы будем использовать схему генетического алгоритма предложенного в [29]. Алгоритм 1. ГА Алгоритм pop = GenerateInitialPopulation while generation ^ max generation do rank = Ranking(pop) fitness = Fitness (pop, rank) for i = 1 to N step 2 do parentl = Selection(pop, fitness) parent2 = Selection(pop, fitness) (childl, child2) = Crossover(parent1, parent2) newpopi = Mutation(childl) newpopi+1 = Mutation(child2) end for pop = newpop generation = generation + 1 end while final rank = Ranking(pop) Solutions = popi, Vi £ final ranki == 1 return Solutions Алгоритм 1 представляет общую схему генетического алгоритма многокритериальной оптимизационной задачи, которая формулируется в общем виде следующим образом: mm f/(x) V /' £ {1, M} при xj < Xj < x" Vj £ {1, P}, (9) где f - /-ая целевая функция, /' = 1, . . . ,M и x = {x1, . . . , xP} , где Xj - j-ая варьируемая переменная и xj £ [xj, x'j ]. Рассмотрим шаги алгоритма более детально. Оператор GenerateInitialPopulation. Этот процесс генерирует массив pop, размерности N*P, которая содержит N (размер популяции) членов, каждая из которых является вектором длины P. Обычно популяция создается с помощью равномерно распределенных случайных величин, при условии, что каждая xj £ [x’j, x'j]. Однако выбор начальной популяции может существенно ускорить сходимость процесса. Из равномерно распределенных случайных величин, мы для решения нашей задачи выбираем ЛПТ последовательности Соболя [8]. Как показывают исследования, их основное свойство заключается в том, что они хорошо покрывают маломерные проекции многомерного куба. Например, проекции на все трёхмерные грани стомерного куба первых 128 членов ЛПт-последовательности хорошо покрывают каждую трёхмерную грань, но плохо покрывают сам куб в силу его большой размерности. С практической точки зрения, это означает, что ЛПт-последовательности хорошо срабатывают для отыскания экстремумов функций, существенно зависящих от небольшого числа своих аргументов, т. е. , что функция P(ll, I2,... ln) = P*(l/1, 1/2,-■■ l/k) + g(ll, h,--- ln), (10) где k<n, и P*>>g. Также, на практике, в силу своей равномерной распределённости, они обеспечивают лучшую сходимость, чем псевдослучайные последовательности. Как было показано в [11,12], интересующие нас функции энергопотребления и уровня выхода годных обладают свойством (10). Для такой функции решение задачи поиска экстремума близко к гиперплоскости. Это позволит ГА быстрее сходится и даже при отсутствии Парето-оптимальных решений, дать приемлемые для инженера-проектировщика решения. В [36,37] приведены алгоритмы быстрой генерации ЛПт-последовательностей и их сравнение с другими равномерно распределенными последовательностями случайных величин. Оператор Ranking. Будем говорить, что решение xa доминирует над решением xb, если имеют место следующие условия. 1. xa не хуже, чем x для любой целевой функции f (xa) > f (xb) V/ = 1,...,M. 2. xa строго лучше xb, хотя бы для одной целевой функции з/f.(xb) < f (xa). Ранжирование осуществляется с помощью следующего алгоритма. Алгоритм 2. Ранжирование X = 1 { {xa, xb} £ pop} do N = length(pop) for a = 1 to N do if 3 b such that xb > xa then push(xa, dominated) end if end for for a = 1 to N do if xa !£ dominated then rankxa ^ x remove(xa, pop) end if end for X ^ X + 1 clear dominated while pop != {ф } return rank Оператор FitnessAssignment. После того, как популяция размера N ранжировано, значения приспособленности присваиваются каждому решению. В начале все решения с в одним фронте, т. е. с одинаковым рангом, получают одинаковое значение приспособленности fk и потом это значение совместно используется остальными решениями. Процедура совместного использования решения xa в фронте k выглядит следующим образом: 1. Вычисляется эвклидово расстояние от другого решения xb в фронте k как: dab — ■ Е P—1 К XP - XP J 2. Функция совместного использования вычисляется как в []: 2 da 2 S (daЪ ) —і 1- ,ъ , если daЪ <#; К ^ J О, в противном случае. Далее вычисляется коэффициент фронта: п„ Pk Е S (daъ), Ъ—1 где pk - количество решений в k-том фронте. Новое значение приспособленности вычисляется как Л=—• Па Эта процедура повторяется для всех фронтов с —+1 = min—) -£> где £ - малое положительно число. Оператор Selection. После того как значения приспособленности присвоены всем решениям данной популяции, выбирается одно решение из пула. Вероятность выбора решения ха с значением приспособленностиfa определяется следующей формулой [27]: /a P( xa) — ■„ Е /j j—1 Оператор Crossover. Скрещивание является фундаментальным механизмом перегруппировки решений в генетических алгоритмах. После того как два родителя выбираются оператором Selection, эти два родителя скрещиваются с вероятностью О.9 для порождения потомства. Операция Crossover может быть представлена следующим образом: 1. Вычислить в. : Pq — 1 (ua)n-1, если u < 1/а; 1 1 Vc-1 , в противном случае, 2 — ua 2 где щс = 30, и - случайное число в диапазоне между 0 и 1, и а = 2~р п ' , где в равно 2 в = 1 + ь---------шт[ха - X, хь - X хь — ха ' 2. Потомки формируются следующим образом: ya — 0.5( xa + xЪ)-Д,^ - xa \, уъ—0.5( xa+xъ)+дг\*ъ - x, \. Оператор Mutation. Операция мутации изменяет маленькую часть решений, приблизительно одну из 10,000. Мутация сама по себе не продвигает нас к решению, но она позволяет удостовериться, что популяция может быть подвергнута дальнейшей эволюции. После того, как два потомка генерируются оператором скрещивания, они мутиру-ются с полиномиальной распределенной вероятностью [31]. Для каждого у; с і Є {1, P} выполняются следующие действия с вероятностью pm: вычисляется параметр д.: S (dab) — [ + (1 - 2u)(1 - S)Vm +1 jn +1 -1, если u < 0.5; 1 - [2(1 - u) + 2(u - 0.5)(1 - S)vm +1 ], еслиu > 0.5, где u - случайное число между 0 и 1, д = mln[ya -у”,у. -у''], а щт = 100+номер итерации. Мутированная часть потомка вычисляется как: za = уа +8q (у” - у” )• Вероятность мутированиярт линейно варьируется между 1/P и 1.0. Более детальное объяснение схем алгоритмов и процедур можно найти в [22-24]. Экспериментальные результаты. Алгоритм был опробован для нескольких библиотек стандартных схем, и подмножестве схем семейства ISCAS [32]. STA был сделан с помощью Berkley PTM [33] для 130 нм транзисторных моделей. Результаты работы алгоритма показаны на рис. 2, 3, из которых видно, что, несмотря на разное количество транзисторов, алгоритм предоставляет несколько решений для выбора инженером-проектировщиком. Все решения обозначенные ‘+’ составляет Парето-оптимальные решения. Несколько решений из этого множества представлены в табл. 1. При использовании традиционной однокритериальной оптимизации, для отыскания тах(о/м) с площадью, не превышающей 100 единиц, мы бы получили один набор длин транзисторов, который был бы в самом правом углу. Рис. 2. Крестиками обозначены результаты оптимизации площадь-задержка О 2 4 6 8 10 Площадь, А Рис. 3. Крестиками обозначены результаты оптимизации площадь-энеропотребление Но, как видно из рисунка (см. рис. 3), существует целое множество решений, которые минимизируют целевую функцию, но при этом имеют меньший размер. Однокритериальная оптимизация не справляется с отысканием таких решений. С другой стороны, ГА позволяет выбрать любое решение из множества Парето-оптимальных решений, например, в левой части. Аналогичную ситуацию мы видим и с энергопотреблением. Таблица 1 Некоторые результаты оптимизации Ячейка Кол-во транзист. Площадь тах(о/и) Энергопотребл. Время раб. с 1 6 26.17 0.07 0.0914 3.76 33.51 0.04 0.0851 53.82 0.02 0.0746 72.61 0.01 0.0701 95.98 0.01 0.0672 2 160 768.61 0.05 6.1245 6.34 1053.99 0.03 5.1341 2132.12 0.01 3.2515 2912.14 0.01 3.0101 3134.45 0.01 2.8642 Выводы. В статье представлен новый подход к решению задачи многокритериальной оптимизации стандартных ячеек КМОП, вариацией длин транзисторов. Оптимизационный генетический алгоритм с использованием ЛПт-поиска, позволяет получать несколько Парето-оптимальных решений, что позволяет внедрять предложенный метод в стандартный маршрут проектирования и использовать для очень широкого класса задач КМОП-схем. ]]></text>
</doc>
