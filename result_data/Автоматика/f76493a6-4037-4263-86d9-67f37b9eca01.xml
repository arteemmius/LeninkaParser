<doc>
  <source auto="true" type="str" verify="true"><![CDATA[https://cyberleninka.ru/article/n/algoritm-sinhronizatsii-zadach-obrabotki-dannyh-v-vychislitelnoy-seti]]></source>
  <category auto="true" type="str" verify="true"><![CDATA[Автоматика]]></category>
  <author auto="true" type="list" verify="true">
    <item type="str"><![CDATA[Ткаченко Дмитрий Викторович]]></item>
  </author>
  <title auto="true" type="str" verify="true"><![CDATA[Алгоритм синхронизации задач обработки данных в вычислительной сети]]></title>
  <keywords auto="true" type="list" verify="true">
    <item type="str"><![CDATA[ЗАЩИТА ДАННЫХ ШИФРОВАНИЕМ]]></item>
    <item type="str"><![CDATA[API-ФУНКЦИИ WINDOWS]]></item>
    <item type="str"><![CDATA[СИНХРОНИЗИРУЮЩИЙ СИГНАЛ]]></item>
    <item type="str"><![CDATA[ОПТИМАЛЬНЫЙ ВЫБОР ПРОТОКОЛА ВЗАИМОДЕЙСТВИЯ]]></item>
  </keywords>
  <annotation auto="true" type="str" verify="true"><![CDATA[В статье анализируются средства взаимодействия процессов в группе, объединенных вычислительной сетью, и предлагается алгоритм для создания программного обеспечения взаимодействия процессов, скрывающий от разработчика распределенной системы низко-уровневую работу с сетью.]]></annotation>
  <text auto="true" type="str" verify="true"><![CDATA[Д.В. Ткаченко В статье анализируются средства взаимодействия процессов в группе, объединенных вычислительной сетью, и предлагается алгоритм для создания программного обеспечения взаимодействия процессов, скрывающий от разработчика распределенной системы низкоуровневую работу с сетью. Разработка программного обеспечения (ПО) распределенных систем является сложной технологической процедурой, что препятствует их широкому распространению. При разработке ПО таких систем у исследователя нет необходимого программного инструментария, за исключением стандартных протоколов связи. В настоящее время появились экспериментальные технологические системы, лежащие между работой с протоколами связи и прикладным уровнем. Цель их предоставить программисту средства разработки распределенных систем, избавляющие его от кодирования межпроцессорного взаимодействия на уровне протоколов связи и позволяющие сосредоточиться на реализации логики задачи. Одним из главных вопросов при разработке таких средств является их эффективность. Проблема взаимодействия процессов в группе состоит в том, что необходимо выполнить ряд требований для корректной их реализации, то есть обеспечить последовательность приходящих к процессу сообщений, не допуская ситуации, когда последующее сообщение может опередить предыдущее (нарушение причинно-следственных связей). Кроме того, необходимо обеспечить атомарность группы так, чтобы группа процессов для пользователя представлялась как единый виртуальный процесс. В распределенной системе может иметься несколько рабочих станций и серверов, объединенных через глобальную вычислительную сеть в группу. Все станции этой группы должны приступать к обработке сигнала «одновременно», в противном случае возможен некорректный результат работы системы, так как одна станция может обработать несколько сигналов и передать результат обработки далее, в то время как другая - только один. В итоге на выходе у разных станций будет информация, непригодная к ее совместному дальнейшему использованию. Эту проблему можно решить рассылкой синхронизирующего сигнала. Под синхронизацией следует понимать единовременное начало обработки сигнала на всех станциях группы, использующих не физическое, а логическое время. То есть все участники группы не должны приступать к обработке следующей порции данных, пока не приступят к обработке текущего сигнала все участники группы. При разработке сетевого приложения одной из основных задач является оптимальный выбор протокола взаимодействия. Протоколы могут предусматривать как ориентированные, так и не ориентированные на соединение службы. Службы, ориентированные на соединение, устанавливают канал связи между двумя сторонами, обменивающимися данными, что гарантирует корректный обмен информацией. Но та- кое взаимодействие вносит дополнительные издержки, связанные с обеспечением корректности доставляемых данных. Службы, не ориентированные на соединение, на порядок быстрее, чем ориентированные на соединение. Это объясняется отсутствием проверки данных и уведомлений об успешной доставке данных. Но при таком взаимодействии возникают другие проблемы: может не соблюдаться порядок доставки данных, нет гарантии, что приемник получит данные (потеря данных в сети). Основное преимущество такой передачи данных - это скорость, так как нет издержек на установление виртуального соединения. В разрабатываемой системе предлагается использовать протоколы, не ориентированные на соединение, так как повторная доставка данных (при их потере в сети с использованием протокола, ориентированного на установление соединения) может сыграть отрицательную роль в связи с тем, что реальная ситуация может измениться к моменту повторной доставки данных. Для параллельной рассылки данных в группе протоколы, ориентированные на установление соединения, недопустимо использовать, так как при этом каждый из участников группы должен поддерживать количество соединений, которое всего на одно будет меньше, чем количество участников группы. Это замедляет процесс рассылки данных в группе участникам из-за того, что один отправитель должен будет последовательно передавать данные каждому участнику группы через уникальное с ним соединение. Данные в системе предлагается доставлять участникам группы посредством многоадресной рассылки (multicasting). Многоадресная рассылка - сравнительно новая технология, разработанная как альтернатива широковещания (broadcasting). Активное использование широковещания сильно увеличивает нагрузку на сеть, снижая ее пропускную способность. Многоадресная рассылка позволяет вещать одному из участников в пределах группы (одинарная отправка в сеть и тиражирование). Однако не все протоколы поддерживают многоадресную рассылку. Так как проектируемая система предназначается под операционную систему Windows и ориентирована на рассылку в IP-сетях, то будет использоваться только IP-протокол, поддерживаемый Win32. Многоадресная рассылка обладает плоскостью управления и плоскостью данных, которые отвечают за членство в группе и передачу данных соответственно. Любая плоскость может быть корневой или равноправной (маршрутизируемой / немаршрутизируемой). В IP-сетях ни одна плоскость не является маршрутизируемой (рис. 1). Рис. 1 - Немаршрутизируемая плоскость Поэтому каждый участник подключается к группе и в группе нет выделенного корневого узла. Такая организация группы подходит для создания распределенной системы передачи данных, так как в любой момент времени в группу могут подключаться рабочие станции и серверы и покидать ее. Многоадресная рассылка поддерживается протоколом IGMP. Протокол IGMP (internet group management protocol, RFC-1112) используется для видеоконференций, передачи звуковых сообщений, а также группового исполнения команд различными ЭВМ. Для взаимодействия двух узлов сети все маршрутизаторы на пути между этими узлами должны поддерживать протокол IGMP. В противном случае маршрутизатор просто удалит пришедшее сообщение многоадресной рассылки. Такая рассылка в IP-сетях рассчитана на использование групповых адресов (диапазон: 224.0.0.0 - 239.255.255.255, часть из них зарезервирована для собственных нужд IGMP, см. RFC-1700). При реализации алгоритма доставки информации внутри группы процессов и синхронизации момента начала выполнения обработки желательно максимально приблизить моменты начала обработки событий (при использовании логического времени как средства синхронизации) к физическому времени. Это возможно осуществить, если заранее запросить нужные параметры, такие как скорость передачи данных и другие. Если запрос нужных параметров завершится удачно, то моменты наступления событий в группе будут близки к моментам, измеряемым в физическом времени, в противном случае это невозможно. Запрашивать необходимые параметры сети и работать с ними возможно при использовании такого сервиса, как QoS. QoS (качество обслуживания) - набор компонентов, позволяющий предпочтительную обработку данных в сетях. Используя этот набор, можно резервировать часть пропускной способности сети для монопольного использования. Протокол RSVP (протокол резервирования ресурсов, RFC-2205) используется ЭВМ для того, чтобы запросить для приложения определенный уровень качества сетевых услуг QoS. RSVP используется также маршрутизаторами для доставки QoS-запросов всем узлам вдоль пути информационного потока, для установки и поддержания необходимого уровня услуг. RSVP-запросы обеспечивают резервирование определенных сетевых ресурсов, которые нужны, чтобы обеспечить конкретный уровень QoS вдоль всего маршрута транспортировки данных. RSVP запрашивает ресурсы только для одного из направлений трафика и только по указанию получателя. RSVP работает поверх IPv4 или IPv6. Протокол относится к числу управляющих, а не транспортных. RSVP предназначен для работы с существующими и будущими маршрутными протоколами, управляющими как обычными, так и мультикастинговыми потоками. В последнем случае ЭВМ сначала посылает IGMP-запрос, для того чтобы подключиться к мультикастинг-группе, а затем уже RSVP-сообщение для резервирования ресурсов по маршруту доставки. Работа с многоадресной рассылкой осуществляется через Winsock 2. Все вызовы API функций Winsock 2 инкапсулирует один из COM-серверов, работающий как драйвер сети. COM (Component Object Model - модель компонентных объектов) - это объектно-ориентированная, основанная на интерфейсах программная архитектура. Или другое опреде- ление: COM - это набор функциональных возможностей, доступных во время выполнения программы [1]. COM является архитектурой программирования. С помощью этой архитектуры можно легко масштабировать приложения. COM не привязывает разработчика к определенному языку программирования. Его серверы и клиенты могут быть написаны на разных языках. Возможно использовать такие языки, как C, C++, Visual Basic, Visual FoxPro, COBOL и другие. COM-объекты реализуются в виде бинарных файлов (.dll или .exe), и общение между клиентом и сервером осуществляется через интерфейсы. Интерфейс - это набор семантически связанных функций, описывающих функциональные возможности (поведение), которые могут быть поддержаны классом [1]. Связь клиента с сервером может быть внутри процесса (in-process), вне процесса (out-of-process) и удаленной. При связи внутри процесса сервер загружается в адресное пространство клиента (рис. 2). Рис. 2 - Связь внутри процесса Преимуществом такой связи является быстрый доступ клиента к методам сервера, так как общается клиент с сервером через указатель на интерфейс. При использовании других видов связи общение клиента и сервера медленнее, так как информация запаковывается, передается и распаковывается на другой стороне. При обработке сигналов скорость взаимодействия играет большую роль, поэтому сервер, обеспечивающий взаимодействие с сетью, реализуется как in-process. Как альтернативу архитектуры COM можно рассматривать CORBA. Предпочтение отдано COM, потому что эта архитектура предназначена для небольших систем и является бесплатной. CORBA предназначена для больших систем и является платной. Кроме того CORBA не зависит от платформы, а COM предназначена для использования под Windows. При реализации COM-серверов возможно использование такой среды разработки, как Microsoft Visual C++ и библиотека ATL. ATL (Active Template Library) - это библиотека активных шаблонов, которая реализует многие стандартные части архитектуры COM. Она избавляет разработчика от написания рутинного однообразного кода и позволяет сосредоточиться на написании логики сервера. СОМ-сервер, отвечающий за работу с сетью, будет использоваться компонентом более высокого уровня, который отвечает за своевременную отправку данных. Рассмотрим алгоритм функционирования компонента синхронной рассылки. Несколько рабочих станций и серверов входят в одну группу, причем каждый участник группы может быть участником другой группы, в которую могут входить как участники этой же группы, так и другой. Каждый участник многоадресной группы может быть как отправителем данных, так и приемником от других участников, следовательно, реализация предлагаемого алгоритма должна быть многопоточной (создание многопоточных приложений описано в [2]). Отправитель через многоадресную группу высылает пакет с данными для обработки его всеми участниками группы. Отправитель имеет список 1Р-адресов и портов, с которых должны быть получены подтверждения. Для работы в группе выделен диапазон групповых адресов, и к группе может подключиться любой пользователь, имеющий соответствующее программное обеспечение. Сервер, работающий с сетью, имеет список адресов, с которых он будет получать подтверждения о получении пакета данных для обработки и игнорировать любые сообщения (при ожидании подтверждения), пришедшие от отправителей, адреса которых не внесены в список обслуживаемых отправителей. Участники группы, в которую был отправлен пакет с данными, принимают этот пакет и на адрес отправителя (не через многоадресную группу) отправляют пакет с подтверждением получения данных. Приемники не содержат адрес отправителя до момента получения данных от него. Данные принимаются через функцию WSARecvFrom Winsock 2, и адрес отправителя содержится в одном из выходных параметров этой функции. Таким образом, сервер, работающий с сетью, получает адрес отправителя и передает его компоненту синхронной рассылки. Отправка подтверждений через многоадресную группу не производится, потому что эти пакеты не несут полезной информации ни одному участнику группы, за исключением самого отправителя. Отправитель ожидает подтверждений от всех участников группы, в которую были отправлены данные, в течение заданного периода времени. При получении подтверждений от всех участников группы или истечении времени ожидания отправитель через многоадресную группу высылает пакет синхронизации, который для всех остальных участников группы является сигналом к началу обработки полученных ранее данных. Интервал ожидания введен для отслеживания ситуации, когда один из приемников может не ответить на пакет с данными (потеря пакета в сети или выход приемника из группы по собственной инициативе или из-за сбоя на рабочей станции). Приемники хранят полученные данные до тех пор, пока не поступит сигнал о начале работы или следующий пакет данных (из этой же группы). В случае, если получена новая порция данных, а для предыдущей не было сигнала синхронизации, предыдущая порция данных не обрабатывается, а удаляется. Предлагаемый алгоритм будет использовать пакеты следующего формата (рис. 3). Type GroupID Stamp Data Рис. 3 - Формат пакета Поле Type определяет тип пакета: данные, сигнал синхронизации, подтверждение. Так как каждый участник группы может быть участником и других групп, то поле GroupID определяет группу, для которой предназначен пакет (в качестве идентификатора группы используется 128-битный GUID). Поле Stamp определяет номер пакета данных (ведение логического времени) и используется для упорядочения обработки входящих пакетов. Логическое время введено Лэмпортом и используется для упорядочения событий в распределенной системе. Вопрос о том, наступают ли эти события в разных процессах в действительности параллельно, некорректен. Лэмпортом было предложено реализовать логическое время как линейно возрастающую в каждом процессе последовательность целых, отсчитываемых счетчиками-часами. Возрастающий неограниченный локальный счетчик делает по одному «тику» между каждыми двумя локальными событиями. В качестве событий в описываемом алгоритме используется номер отправляемого пакета. В отличие от метода, предложенного Лэмпортом, в описываемом алгоритме локальные часы каждого процесса не подводятся. Для каждой пары отправитель-группа получателей определяется свое логическое время, уникальность которого при взаимодействии с другими процессами определяется сочетанием полей Stamp, GroupID и адресом отправителя. Поле Data может содержать разные данные. Содержимое этого поля определяется значением в поле Type. Если поле Type принимает значение «подтверждение», то в поле Data содержится значение поля Stamp пакета, для которого отправляется подтверждение. Если поле Type содержит значение «сигнал синхронизации», то в поле Data находится значение поля Stamp пакета, для которого высылается пакет синхронизации. Если поле Type содержит значение «данные», то в поле Data содержится пакет следующего формата (рис. 4). Рис. 4 - Формат пакета данных Поле Len определяет размер поля SrcData. Поле SrcData содержит данные, формат которых определяется поставщиком и потребителями данных. Так как данные могут быть сжаты или зашифрованы, то поле Flags указывает на это. На рис. 5 показана схема объединения нескольких станций в группу. Прямоугольниками обозначены станции. Линиями, идущими от станции к станции, показаны направления передачи пакетов с подтверждениями о получении данных. Линиями, соединяющими станции и группу, показана отправка пакетов данных и пакетов синхронизации и получение пакетов синхронизации. При работе с одним фрагментом данных отправитель через многоадресную группу отправляет два пакета: один с данными для обработки, другой с сигналом о начале обработки. При этом отправитель получает п -1 пакетов с подтверждением о получении данных, где п - число участников группы. Всего при работе с одним фрагментом данных через сеть проходит (п -1) + 2 = п +1 пакет, из которых только один большого размера, содержащий данные для обработки. Рис. 5 - Объединение нескольких станций в группу В связи со свободным доступом в группу предусматривается защита данных шифрованием. Защита данных реализуется через API-функции Windows. При передаче больших объемов информации (например изображения) уменьшить нагрузки на сеть можно за счет уменьшения размеров пакетов, несущих данные. Для этого может быть использовано кодирование изображения - сжатие. Сжатие изображения может производиться на основе дискретного косинусного преобразования. Процедура обмена данными должна организовываться таким образом, чтобы минимизировать нагрузку на сеть. Так как архитектура COM позволяет создавать масштабируемые приложения, то добавление новых методов шифрования и сжатия данных не представляет трудностей. ]]></text>
</doc>
