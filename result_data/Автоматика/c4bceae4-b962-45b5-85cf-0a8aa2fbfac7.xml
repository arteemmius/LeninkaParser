<doc>
  <source auto="true" type="str" verify="true"><![CDATA[https://cyberleninka.ru/article/n/prostranstvenno-vremennaya-optimizatsiya-struktury-dannyh-estestvennogo-yazyka-s-dostupom-po-klyucham]]></source>
  <category auto="true" type="str" verify="true"><![CDATA[Автоматика]]></category>
  <author auto="true" type="list" verify="true">
    <item type="str"><![CDATA[Злыгостев Илья Сергеевич]]></item>
  </author>
  <title auto="true" type="str" verify="true"><![CDATA[Пространственно-временная оптимизация структуры данных естественного языка с доступом по ключам]]></title>
  <keywords auto="true" type="list" verify="true">
    <item type="str"><![CDATA[СТРУКТУРА ДАННЫХ]]></item>
    <item type="str"><![CDATA[PATRICIA ДЕРЕВО]]></item>
    <item type="str"><![CDATA[СТАТИСТИКА]]></item>
    <item type="str"><![CDATA[СЛОВАРЬ]]></item>
    <item type="str"><![CDATA[РУССКИЙ ЯЗЫК]]></item>
    <item type="str"><![CDATA[ЛЕКСИКОГРАФИЧЕСКИЙ ПОРЯДОК]]></item>
    <item type="str"><![CDATA[ИТЕРАЦИЯ]]></item>
    <item type="str"><![CDATA[ОПТИМИЗАЦИЯ ПО ОБЪЕМУ]]></item>
  </keywords>
  <annotation auto="true" type="str" verify="true"><![CDATA[В работе проведена оптимизация структуры PATRICIA-дерева в контексте использования ее для хранения данных, ключами доступа к которым являются слова русского языка с целью уменьшения объема, занимаемого структурой при минимальных потерях в скорости работы с ней. Оптимизация проведена на основе данных статистически словаря русского языка. Приведены алгоритмы итераций по ключам структуры, отсортированным в лексикографическом порядке. Оптимизация структуры привела к сокращению размера дерева в 25 раз и сделала доступным использование структуры как с целью быстрого поиска, так и для управления содержащимися в ней данными.]]></annotation>
  <text auto="true" type="str" verify="true"><![CDATA[В работе проведена оптимизация структуры PATRICIA-дерева в контексте использования ее для хранения данных, ключами доступа к которым являются слова русского языка с целью уменьшения объема, занимаемого структурой при минимальных потерях в скорости работы с ней. Оптимизация проведена на основе данных статистически словаря . , -ным в лексикографическом порядке. Оптимизация структуры привела к сокращению размера дерева в 25раз и сделала доступным использование структуры как с целью быстрого , . Структура данных; PATRICIA дерево; статистика; словарь; русский язык; лексико; ; . I.S. Zlygostev SPATIO-TEMPORAL OPTIMIZATION OF DATA STRUCTURE IN NATURAL LANGUAGE WITH ACCESSING BY-KEYS In this work the PATRICIA-tree structure optimization in the context of using it for data storage was investigated. The access keys for data are the words of Russian language. Optimization made by volume contraction of structure with the minimum loss of work speed. Optimization was done on basis of statistical data of Russian language vocabulary. The algorithms of direct and reverse iterations by structure keys that sorted lexicographically were considered. Research makes it possible to decrease the structure size 25 times and makes available the usage of the structure not only for the quick search, but also for the full data control. Data structure; PATRICIA-tree; statistic optimization; dictionary; Russian language; lexicographical grading; iteration on tree; volume optimization. Автоматизация задач обработки текста на естественном языке привела к развитию компьютерной лингвистики [3]. В ней проводится формализация модели правил естественного языка. Существует целый ряд задач автоматизированной обработки текста, для реализации которых необходимо хранение и использование словаря естественного языка [2]. В частности, такими задачами являются системы , , , извлечения знаний из текста, системы лингвистической обработки текста, генераторы естественной речи, интеллектуальный системы text-to-speech. Чем глубже и точнее проводится в системе лингвистический и смысловой анализ текста, тем вероятней, что система содержит словарь языка, с которым она работает. Слова в таких словарях являются ключами доступа к некоторым данным системы. Так, для компьютерного морфологического анализа языка такими данными могут быть морфологические характеристики слова. В поисковых системах слову ключу соответствует строчка инвертированного индекса со списком оценки значимости слова для документов, по которым поисковая система ведет поиск. Количество слов развитого естественного языка достаточно велико [1]. Современные поисковые системы насчитывают в своих словарях порядка 10 миллионов слов русского языка. Различные по написанию слова в тексте могут являться словоформами одной леммы языка [1]. Количество слов в словаре естественного , , , -жду этими двумя величинами тем сильней, чем развитей морфология словообразо-. морфологией других языков [2]. Словоформы одной леммы отличаются аффиксами [7]. Аффиксы бывают левыми и правыми. Множество аффиксов естественного языка ограничено и количество элементов в нем незначительно в сравнении с количеством лемм в языке. Таким образом, существует множество слов в словаре отличающихся только аффиксами. Современный этап развития программных средств ведет к построению программ на основе уже имеющихся компонент. Компоненты реализуют некоторые функциональности и предоставляют интерфейс для их использования. Одна компонента может использоваться несколькими программами, запущенными на различных компьютерах и предоставлять им сервис использования своих функцио-. Развиваются программные компоненты, реализующие задачи компьютерной лингвистики, развиваются системы управления базами данных. В такого рода компонентах может обслуживаться множество запросов и содержаться большие мас. -ной памяти компьютера и времени процессора при работе со структурами-контейнерами в качестве ключей доступа к данным, которых используются слова . В качестве реализации структуры могут быть выбраны массивы, списки, векторы с записями вида слово-ключ и соответствующими ему данными. Также структурами могут быть выбраны карты, хэш-массивы [6], различные реализации деревьев [4] с ключами доступа к данным в виде слов естественного языка. Электронный «Грамматический словарь русского языка» А А. Зализняка [1] является одним из наиболее полных открытых источников перечня всех словоформ лемм [2] русского языка в цифровом виде. Данный факт послужил причиной выбора его в качестве основы для исследования статистических характеристик слов русского языка и источника слов-ключей для проведения экспериментов над исследуемыми в работе структурами данных. Автором получена следующая общая статистика о словаре: словарь содержит Wau = 3469277 словоформ Wnf_au = 100000 лемм русского языка, максимальная длина слова в словаре W[en = 27 букв, среднее количество словоформ одной леммы словаря Waver_wf = 34,69. Без учета регистра букв слова, все слова в словаре построены на основе 34-х символов. Размер словаря 45 876 КБ. Для упрощения процедуры подсчета размера памяти, занимаемого различными реализациями структур данных, которые возможно использовать для хранения , , . Wnfau*2 = 100 000(слов)*2 = 200 000 байт = 195 КБ. Символы окончания строк в файле занимают Wau*2 = 3 469 277*2 = 6 938 554 байт=6775 КБ. То есть символы, составляющие слова словаря в файле имеют размер Cslze=45876-6755-200=38921 КБ. Получены численные характеристики распределения количества слов в словаре по их длине. Ниже приведена табл. 1 с количеством и долей слов определенной длины в «Грамматическом словаре русского языка» А.А. Зализняка. 1 Распределение слов в словаре Зализняка по количеству символов Длина слова Количество слов Процент слов Длина слова Количество слов Процент слов 1 27 00,0008 % 15 217280 06,2630 % 2 279 00,0080 % 16 133446 03,8465 % 3 3317 00,0956 % 17 78427 02,2606 % 4 13662 00,3938 % 18 42439 01,2233 % 5 39538 01,1397 % 19 23481 00,6768 % 6 83785 02,4151 % 20 12105 00,3489 % 7 161169 04,6457 % 21 6887 00,1985 % 8 252656 07,2827 % 22 3033 00,0874 % 9 338656 09,7616 % 23 1437 00,0414 % 10 424512 12,2363 % 24 695 00,0200 % 11 453602 13,0748 % 25 227 00,0065 % 12 461646 13,3067 % 26 145 00,0042 % 13 401986 11,5870 % 27 28 00,0008 % 14 314812 09,0742 % 28 0 00,0000 % В результате выявлено, что распределение слов по числу символов в словаре нормальное и средняя длина слова в словаре Waveг_len = 11,49 символа. В силу достаточно большого объема содержащихся в «Грамматическом словаре русского языка» А А. Зализняка слов - можно считать приведенную статистику приблизительным отражением распределения слов по длине в русском языке. Перед началом исследования структур, необходимых для хранения данных , . 1. Возможность внесения данных по схеме «строка-ключ / значение». 2. Наличие программного интерфейса по внесению элементов в контейнер. 3. Наличие программного интерфейса для удаления элементов из контейнера. 4. . 5. Проверка наличия элементов в контейнере. 6. Интерфейс для прямого и обратного итеративного перехода по элементам контейнера. Итератор организует переход по элементам контейнера, упорядоченного в лексикографическом порядке по значениям строки-ключа. 7. Определение конечного и начального итератора. Небольшой алфавит символов, сравнительно небольшая средняя и максимальная длина слова и большое количество повторяющихся начальных частей слов привели автора работы к мысли о возможности применения для хранения словаря слов русского языка в методе морфологического анализа древовидной структуры типа райе-дерева. Для аргументации выбора проведем характеристики основных альтернативных структур данных. Если строки со словами словаря будут храниться в минимальной для несжатого хранения строк структуре С-с^оках, они будут занимать 8С_Й = Cslze+Walr42308 КБ . Определимся с данными, хранимыми в структурах в проводимых исследованиях. Пусть ключами поиска в контейнерах будут С-строки со словами на русском , 4- . - ные любого вида. То есть такая структура универсальна к данным словаря. Будем вычислять в рамках исследования размеры некоторой реализации структуры вы, - . Линейный список Рассмотрим вариант организации словаря словоформ русского языка в виде . 2 -щий элемент списка + слово + ссылка на данные. Без учета слова структура записи в контейнере имеет размер 2*4 байта + 4 байта = 12 байт. Размер всего списка Бцз4= 12*Wall+Sc 84г = 82964 КВ = 81 МВ. Сложность алгоритмов поиска нужного элемента в списке 0(№ М), где N - количество словоформ в словаре, М - длина слова. Операция вставки или удаления элемента в упорядоченном списке производится алгоритмом со сложностью 0(№М). Вставка или удаления указанного элемента, будет производиться в одну операцию после поиска его места в списке. На базе списка нет проблем в реализа-. Массив записей Элементами массива являются структуры данных вида {Строка, ссылка на данные}. По причине оптимальности хранения строк в С-формате, элементы массива будут иметь разную длину. В этом случае массив словоформ слов русского языка может быть оптимально организован в виде массива ссылок на структуры . Посчитаем размер массива. Он будет составлен из суммы размера массива ссылок на элементы массива, размера ссылок на данные, и строки: Saг=8*Wall+Sc_stг = 69412 КВ = 68 МВ. В процессе инициализации массива может возникнуть проблема в выделении участка памяти размером 8*Wall = 27 МВ единым сегментом по причине фрагмен- . Операция поиска слова из словаря в оптимальной реализации строкового массива имеет сложность 0(^^М)) (метод дихотомии). Здесь N - количество словоформ в словаре, М - длина слова. По причине необходимости переноса всех последующих элементов после вставки или удаления какого-нибудь элемента массива, операции вставки и удаления элементов будут иметь сложность 0(^^М)+№). На базе массивов нет проблем в реализации итераторов. Patriria-дepeвo Patricia-дepeвo [5] составлено из вершин. Вершины соединены двунаправлен. , исходящая связь на узел предка и п ссылок на все возможные дочерние узлы. Здесь, п = [число символов в алфавите]+1. Если дочерних узлов нет, то ссылка об. Каждая значимая ссылка от узла отца к узлу сына помечается символом перехода. У графа есть корневая вершина. У нее нет вершины отца. Переходя от корневой вершины по ссылкам ветви Patricia-дepeвa и собирая в кортеж символы, соот- ветствующие последовательным переходам в дереве, осуществляется поиск вер, . -тежей-ключей используются слова русского языка. Получается, что все строки райсіа-дерева, имеющие общее начало, располагаются в одном поддереве. Каждое ребро помечено некоторым символом. Терминальным вершинам («листьям») соответствуют некоторые слова-ключи структуры (рис. 1). Рис. 1. Структура связей между узлами в раМаа-дереве Таким образом, получается, что в программной модели, если мы используем входную С-строку в качестве ключа, то каждый узел дерева имеет 256 ссылок на . , функциональности по работе с одной вершиной CTreeNode. Класс, организующий работу с деревом в целом и содержащий вершину корня, назовем СТгее. В этих двух классах можно обеспечить реализацию работы с райааЧгее. Для вставки нового элемента по ключу в дерево необходимо: a) найти максимальную подстроку в дереве, соответствующую ключу, начиная с начала слова; b) дополнить подстроку до полного совпадения с ключом; c) произвести вставку значение в конечный узел строки ключа. Сложность первой и второй операции в райаа-деревьях 0(М). Третья операция производится в одно действие. Таким образом, сложность всей операции вставки элемента в райаа-дерево 0(М). Для удаления элемента из структуры необходимо: a) ; b) , , . 0(М). , удаления элемента из райаа-дерева 0(М). В рамках исследования проведена инициализация классической реализации райаа-дерева данными по словам-ключам словаря АЛ. Зализняка. В такой реализации райаа-дерева слова-ключи составлены из однобайтовых символов. Каждый узел дерева содержит следующие данные: ♦ Массив указателей на корни узлов поддеревьев детей (1024 байта). ♦ Указатель на данные дерева (4 байта). ♦ Указатель на узел родителя (4 байта). То есть каждый узел дерева занимает Vnode_size = 1032 байта. В случае отсутствия у рассматриваемого узла дочерних узлов, узла родителя или значения - ссылки на соответствующие элементы обнулены. Доступ к patricia-дереву производится по уникальным ключам. В русском языке слова омонимы могут иметь одинаковое написание, но разное значение. Проблему использования patricia-деревьев в словарях, содержащих слова-омонимы , , , возможных значений по ключу. При тестировании patricia-дерева использовались только уникальные ключи. Поэтому слова омонимы в текстовый вариант patricia-дерева не были включены. В результате тестирования классической реализации patricia-дерева на словах электронного словаря А.А. Зализняка получены новые статистические данные. Структура дерева содержит Tnodes = 3 239 042 узлов. Число омонимов в словаре -Nhomonyms = 1 339 701. Слова омонимы составляют 38,62 % словаря русского языка. Количество узлов, содержащих данные Tvaiues = 2 129 576. То есть в словаре содержится Tvaiues уникальных по написанию слов. , , Vnode_size * Tnodes = 3 342 691 344 bytes = 3 188 MB = 3,1 Gb. Это величина на 2 порядка превышает размер других реализаций структур данных хранения словаря . . . Несмотря на хорошие характеристики в скорости поиска, удаления и вставки элементов классической реализации patricia-дерева, структура признана автором непригодной для использования в хранении больших объемов данных по словам-ключам русского языка. Сравнительно большой объем используемой оперативной памяти вводит жесткие ограничения на применение данной структуры в реальных . Тем не менее высокая скорость работы, с инициализированными данными структуры в контексте решаемых в работе задач, привела автора к мысли о возможности оптимизации структуры. Действительно, скорость доступа к данным по - данных решающих подобную задачу. При реализации и исследовании структуры данных классического patricia-дерева, автором был получен ряд результатов, которые смогут помочь при оптими-. , Vsize. - Vsize = 4 . , структуре patricia-дерева, содержащей данные Tvalue_size = Tvalues* Vsize. Тогда данные patricia- , - . . - го Tvalue_size = 8 518 304 байта = 8,12 MB. Размер классической реализации patricia-дерева 3188 MB. Таким образом, основная часть рабочего пространства памяти занята под структуру ключей дерева. В классической реализации patricia-дерева в каждом дереве присутствует 256 ссылок на дочерние элементы дерева. Возможно, что словарь дерева будет мень-. , -тервале ASCII символов и что он вместится в диапазон 256 элементов. Оптимизация patricia-tree сокращением словаря символов структуры Программный модуль patricia-дерева был снабжен дополнительным классом CSymbolsManager, реализующим работу с выборкой из всех возможных символов в типе char (р^мер byte) только тех, с которыми предполагается работать patricia-дереву. Алфавит patricia-дерева считывается из файла при инициализации класса. Всем символам словаря присваиваются внутри класса в соответствие номера таким , , подряд и начинаются с единицы. patricia- - го 1 экземпляр класса CSymbolsManager. Ссылка на него есть во всех узлах дерева. Цель работы класса - делать прямое и обратное преобразование ASCII символов d соответствующего им номера. В результате добавления CSymbolsManager число ссылок в узлах дерева уменьшилось по причине уменьшения размера алфавита . Тестирование программного модуля проводилось на дереве, использующем словарь размером в 61 символ (русские, английские буквы нижнего регистра и символы “/”, ”-“). Было реализована функциональность в дереве, делающая его регистронезависимым. Все слова-ключи - переводятся в нижний регистр перед использованием в дереве. Таблица 2 Число узлов, соответствующих некоторому символу в ра1пс1а-дереве. Дерево составлено на основании словаря АЛ. Зализняка Символ Найдено в дереве Процент узлов Символ Найдено в дереве Процент Узлов «с» 571522 17,645 % «ш» 37535 01,159 % «I» 535206 16,524 % <«!» 26200 00,809 % «е» 312693 09,654 % «к» 22207 00,686 % «м» 201171 06,211 % «щ» 10412 00,321 % «и» 194572 06,007 % «р» 9564 00,295 % «й» 176957 05,463 % «ч» 6326 00,195 % «ь» 155384 04,797 % «ц» 4525 00,139 % «О» 151724 04,684 % «д» 3890 00,120 % <у» 151270 04,670 % «в» 3104 00,096 % «ю» 141641 04,373 % «п» 2329 00,072 % «а» 127725 03,943 % <ж» 2205 00,068 % <«» 99021 03,057 % «б» 2020 00,062 % от» 87185 02,692 % «ф» 937 00,029% «г» 60283 01,861 % «-» 406 00,013 % «ы» 50734 01,566 % «ё» 144 00,004 % «н» 45169 01,395 % «э» 117 00,004 % «в» 44793 01,383 % от» 70 00,002 % После оптимизации структура дерева в памяти заняла 823,62 МВ. Таким образом, объем памяти, занимаемый структурой дерева, уменьшился почти в 4 раза. В силу использования в CSymbolsManager таблиц переходов, скорости работы алгоритма за счет оптимизации фактически не изменилось. Все узлы дерева, как и в , . Тем не менее размер структуры на порядок больше размеров списков и массивов, содержащих те же элементы, что и в райаа-дереве. Применение структуры дерева для использования ее в лингвистических модулях с большим числом слов-ключей остается затруднительным. Для оптимизации полученной структуры, автор работы провел дополнительные статистические исследования, результаты которых представлены ниже в виде . . . . Таблица 2 содержит численные характеристики, отражающие количество уз, . Таблица 3 отражает количественные характеристики связей в дереве. В таблице представлены данные о числе узлов раїгісіа-дерева, содержащих ссылки на определенное количество сыновей. Дерево составлено на базе данных из электронного словаря Зализняка. 3 Количество узлов раШс1а-дерева с заданным числом значимых связей в нем. Дерево составлено на основании словаря А.А. Зализняка Число Связей Узлов в дереве Процент Узлов Число Связей Найдено в дереве Процент Узлов 0 1258631 38,85812 % 17 34 0,00105 % 1 1481678 45,74433 % 18 32 0,00099 % 2 198904 6,14083 % 19 20 0,00062 % 3 40040 1,23617 % 20 26 0,00080 % 4 124821 3,85364 % 21 20 0,00062 % 5 103126 3,18384 % 22 19 0,00059 % 6 16954 0,52343 % 23 7 0,00022 % 7 5721 0,17662 % 24 17 0,00053 % 8 6152 0,18993 % 25 6 0,00019 % 9 1022 0,03155 % 26 6 0,00019 % 10 880 0,02717 % 27 6 0,00019 % 11 368 0,01136 % 28 7 0,00022 % 12 207 0,00639 % 29 5 0,00015 % 13 134 0,00414 % 30 2 0,00006 % 14 77 0,00237 % 31 0 0,00000 % 15 66 0,00204 % 32 0 0,00000 % 16 54 0,00167 % 33 0 0,00000 % На основании того, что электронный словарь А.А. Зализняка - один из наиболее полных источников перечня всех словоформ слов русского языка, следует , -стика достаточно точно отражает предположительную долю узлов райаа-дерева, составленного по всем словам русского языка во всех их словоформах. Оптимизация раШс1а-дерева отбрасыванием ссылок на дочерние узлы в листьях дерева На основании анализа данных, приведенных в таблицах, автор задался мыслью об оптимизации структуры хранения ссылок на дочерние узлы. В дереве, в 84% случаев узлы либо не имеют дочерних узлов, либо имеют один. Вероятность встречи различных символов в узле - различна. В классе реализации узла CTreeNode, вносятся изменения в структуру райаа-дерева. Вместо статического массива ссылок на дочерние узлы вводится ссылка на динамическую структуру данных, хранящую эти узлы. Если у узла нет дочерних, то ссылка на структуру обнуляется. В результате, мы на порядок уменьшаем размер (39%) узлов дерева (табл. 3). Оптимизация управления памятью в узлах раШс1а-дерева Следующая оптимизация произведена в реализации класса управления символами в узлах дерева CSymbolsManager. Ранее упоминалось, что символы входного алфавита дерева индексируются в классе, начиная с единицы. Приведем описание структуры данных ссылок, которыми управляет класс. Структура представлена в виде упорядоченного массива одноразмерных эле- . -та в CSymbolsManager, по которому осуществляется переход. Ссылки на несуществующие дочерние узлы обнулены. Добавим в массив ссылок элемент с нулевым индексом. Пусть он содержит самый большой номер элемента массива, содержащего не нулевую ссылку. По сути, в элементе с индексом 0 массива содержится длина массива со значащими ссылками. Если искомая ссылка с узла по букве имеет индекс меньший числа, со- 0, - - 0. , выделять памяти ровно до последнего значащего элемента в массиве, т.е. размером, указанным в элементе с индексом 0 массива ссылок, то структура останется , . При реализации вышеописанных изменений возникли небольшие проблемы в методе по добавлению новых ссылок в существующий динамический массив: если индекс добавляемой ссылки превышает значение нулевого элемента в массиве, то возникает необходимость в динамическом расширении памяти в массиве. По при, память под элементы в массиве выделять одним блоком, возникла необходимость в выполнении ряда дополнительных операций. Для добавления новой ссылки в : 1. Создать новую структуру данных для ссылок, размер которой определяется индексом новой добавляемой ссылки. 2. Скопировать старую структуру данных в новую. 3. . 4. . 5. Освободить память, занимаемую старой структурой. Копирование и освобождение небольших блоков памяти, таких как в рассматриваемом случае (4 байта * 32 символа = 128 байт), для современных ПК не , . вставки и удаления элементов в новой структуре данных останется все также на , , , . Оптимизация раШс1а-дерева изменением порядка символом алфавита в узлах В рамках описываемой реализации райаа-дерева произведена еще одна оптимизация. Она касается переупорядочивания символов входного алфавита. Как . 2, -роятна. Инициализируем в CSymbolsManager алфавит, упорядоченный по убыва- ( . 2). , вероятный для встречи в узле переход по символу будет иметь меньший индекс в массиве ссылок на дочерние узлы. Цель оптимизации порядка алфавита - уменьшить размер дерева. В результате применения переупорядоченного алфавита, значения максимальных индексов в узлах дерева в массиве ссылок на дочерние деревья стали в среднем значительно . массива ссылок в узле (смотрите первую оптимизацию для структуры хранения ), -, . -чимый индекс в массиве ссылок, тем меньше и размер структуры со ссылками в . Приведем результаты тестирования реализации оптимизаций структуры хранения ссылок на дочерние узлы. Размер, занимаемый структурой, уменьшился в 6,59 раза в сравнении с прошлой оптимизацией и в 25,5 раз в сравнении с классической реализацией райаа-дерева. Время инициализации и деинициализации новой структуры данных уменьшилось в 2,5 раза в сравнении с прошлой реализацией дерева. Оптимизированный размер patricia-tree структуры составил 125 МВ. Открытым остается вопрос об организации итеративного процесса по словам, . нашел в открытых источниках реализации данного алгоритма и предложил свой. . Алгоритм прямого шага итератора по ра!пс1а-дереву Если текущий итератор не лист ветви дерева, до тех пор, пока текущий итератор не попадет в узел, содержащий значение. ♦ Выбираем первую дочернюю ветвь поддерева в узле и делаем ее корень текущим узлом итератора. По завершению цикла отдаем итератор на узел. Операция завершена. - . Пока у текущего узла итератора есть родитель и узел соответствует последнему поддереву в списке поддеревьев родителя. Делаем узел родитель текущим. a. - , итерации, является конечным, его и возвращаем, как результат работы алгоритма. b. Если ветвь на текущий узел не последняя в поддеревьях узла родителя, переходим к следующей ветви родителя и выполняем цикл. До тех пор, пока текущий итератор не попадет в узел, содержащий значение. ♦ текущим узлом итератора. По завершению цикла отдаем итератор на узел. Операция завершена. Алгоритм обратного шага итератора по раШс1а-дереву Ищем у родителя поддерево, ссылающееся на текущий узел. Пока поддерево на текущий узел у родителя является первым в списке и в уз-ле-ро дителе не содержится значения. Ищем у родителя поддерево, ссылающееся на текущий узел. ♦ Если родителя нет, то мы при входе в алгоритм находились в начальном узле дерева. И, следовательно, возвращаем результат неизмененный . ♦ узле-родителе не содержится значения, устанавливаем узел родитель текущим в итераторе. ♦ Если поддерево на текущий узел у родителя не является первым в списке: 1. . 2. . Пока текущий элемент в итераторе не будет листом в дереве. а. ( ) - ходим по нему в дочерний узел, устанавливая его текущим. ♦ Если текущий узел является листом дерева, возвращаем итератор на него, как результат работы алгоритма. ♦ списке поддеревьев родителя и в узле-ро дителе есть значение - передаем в качестве результата работы алгоритма итератор на узел родителя. Выводы Структура райаа-дерева построена таким образом, что обеспечивает минимальное число операций для осуществления поиска значения по ключу и небольшое число операций, для осуществления вставки значения в дерево по ключу или . -ты структуры по времени. Ширина дерева ограничена алфавитом, составляющим слова-ключи дерева. Глубина дерева невелика - в силу того, что ключами в дереве являются слова . , в словах из-за сжатия данных, по причине совпадения большого количества начал . Предложенные итерационные алгоритмы по ключам дерева не являются рекурсивными. Выполнение одного шага итерации в любую сторону имеет сложность О(М), где М - максимальная длина слова в словаре. Существенным плюсом patricia-tree структуры, имеющей в запасе предложенные итеративные алгоритмы , лексикографическом порядке данным не нуждается в предварительной их сортировке. Это положительно влияет на сложность алгоритмов, поддерживающих работу со структурой. В результате проведенных автором оптимизаций реализации райаа-дерева, размер, занимаемый структурой уменьшился в 25 раз. При этом характеристики скорости выполнения базовых операций с данными структуры остались практически неизменными. Размер patricia-tree структуры составил 125 МВ. Пространственная оптимизация структуры дала результат сравнимый с альтернативными , -ру на порядки больше, чем в альтернативных структурах. По причине сравнительно большой эффективности выполнения базовых операций работы со структурой слово-значение в оптимизированном в рамках работы автором райаа-дереве, структура является достаточно оптимальной по скорости и приемлемой по занимаемой памяти для хранения данных по словам-ключам словаря русского языка. ]]></text>
</doc>
